
telly.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	5a 22 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	5a 22 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	5a 22 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	5a 22 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	5a 22 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	5a 22 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	5a 22 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	5a 22 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	5a 22 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	5a 22 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	5a 22 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	5a 22 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	5a 22 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	5a 22 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	5a 22 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	5a 22 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	5a 22 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	5a 22 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	5a 22 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	5a 22 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	5a 22 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	5a 22 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	5a 22 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	5a 22 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	5a 22 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	5a 22 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	5a 22 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	5a 22 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	5a 22 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	5a 22 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	5a 22 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	5a 22 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	5a 22 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	5a 22 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	5a 22 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	5a 22 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	5a 22 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	5a 22 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	5a 22 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	5a 22 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	5a 22 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	5a 22 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	5a 22 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	5a 22 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	5a 22 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	5a 22 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	5a 22 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	5a 22 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	5a 22 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	5a 22 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	5a 22 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	5a 22 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	5a 22 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	5a 22 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f 28 21    	mov.w     #0x1280, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	89 00 07    	rcall     0x1238 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	40 23 22    	mov.w     #0x2234, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	de 1f 02    	call      0x1fde <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	a0 06 20    	mov.w     #0x6a, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	70 1f 04    	goto      0x1f70 <_forwardR>
    1216:	00 00 00 
    1218:	c8 1f 04    	goto      0x1fc8 <_stopR>
    121a:	00 00 00 
    121c:	9c 1f 04    	goto      0x1f9c <_backwardR>
    121e:	00 00 00 
    1220:	5a 1f 04    	goto      0x1f5a <_forwardL>
    1222:	00 00 00 
    1224:	b2 1f 04    	goto      0x1fb2 <_stopL>
    1226:	00 00 00 
    1228:	86 1f 04    	goto      0x1f86 <_backwardL>
    122a:	00 00 00 
    122c:	bc 1e 04    	goto      0x1ebc <_vendor_requests>
    122e:	00 00 00 
    1230:	e2 12 04    	goto      0x12e2 <_usb_set_address_callback>
    1232:	00 00 00 
    1234:	24 1b 04    	goto      0x1b24 <_usb_send_data_packet>
    1236:	00 00 00 

00001238 <__crt_start_mode>:
    1238:	00 00 05    	retlw.w   #0x0, w0
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	38 21 04    	goto      0x2138 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	d6 20 04    	goto      0x20d6 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	08 22 04    	goto      0x2208 <.LFE1>
    10ee:	00 00 00 
    10f0:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	5a 22 04    	goto      0x225a <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000923a <_Device>:
    923a:	12 01       	.word 0x112
    923c:	00 02       	.word 0x200
    923e:	00 00       	.word 0
    9240:	00 40       	.word 0x4000
    9242:	66 66       	.word 0x6666
    9244:	03 00       	.word 0x3
    9246:	00 00       	.word 0
    9248:	01 02       	.word 0x201
    924a:	00 01       	.word 0x100

0000924c <_Configuration1>:
    924c:	09 02       	.word 0x209
    924e:	12 00       	.word 0x12
    9250:	01 01       	.word 0x101
    9252:	00 a0       	.word 0xa000
    9254:	32 09       	.word 0x932
    9256:	04 00       	.word 0x4
    9258:	00 00       	.word 0
    925a:	ff 00       	.word 0xff
    925c:	ff 00       	.word 0xff

0000925e <_Configurations>:
    925e:	4c 92       	.word 0x924c

00009260 <_String0>:
    9260:	04 03       	.word 0x304
    9262:	09 04       	.word 0x409

00009264 <_String1>:
    9264:	1a 03       	.word 0x31a
    9266:	4f 00       	.word 0x4f
    9268:	6c 00       	.word 0x6c
    926a:	69 00       	.word 0x69
    926c:	6e 00       	.word 0x6e
    926e:	20 00       	.word 0x20
    9270:	43 00       	.word 0x43
    9272:	6f 00       	.word 0x6f
    9274:	6c 00       	.word 0x6c
    9276:	6c 00       	.word 0x6c
    9278:	65 00       	.word 0x65
    927a:	67 00       	.word 0x67
    927c:	65 00       	.word 0x65

0000927e <_String2>:
    927e:	20 03       	.word 0x320
    9280:	50 00       	.word 0x50
    9282:	49 00       	.word 0x49
    9284:	43 00       	.word 0x43
    9286:	32 00       	.word 0x32
    9288:	34 00       	.word 0x34
    928a:	46 00       	.word 0x46
    928c:	4a 00       	.word 0x4a
    928e:	31 00       	.word 0x31
    9290:	32 00       	.word 0x32
    9292:	38 00       	.word 0x38
    9294:	47 00       	.word 0x47
    9296:	42 00       	.word 0x42
    9298:	32 00       	.word 0x32
    929a:	30 00       	.word 0x30
    929c:	36 00       	.word 0x36

0000929e <_Strings>:
    929e:	60 92       	.word 0x9260
    92a0:	64 92       	.word 0x9264
    92a2:	7e 92       	.word 0x927e
Disassembly of section .text:

000012a4 <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    12a4:	06 00 fa    	lnk       #0x6
    12a6:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    12a8:	a0 4a 20    	mov.w     #0x4aa, w0
    12aa:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    12ac:	ce 40 90    	mov.b     [w14+4], w1
    12ae:	01 4f 78    	mov.b     w1, [w14]
    12b0:	13 00 37    	bra       0x12d8 <.L3>

000012b2 <.L4>:
        U1EP[ep] = ENDPT_DISABLED;
    12b2:	1e 80 fb    	ze        [w14], w0
    12b4:	00 00 40    	add.w     w0, w0, w0
    12b6:	9e 00 90    	mov.w     [w14+2], w1
    12b8:	00 80 40    	add.w     w1, w0, w0
    12ba:	80 00 eb    	clr.w     w1
    12bc:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    12be:	1e 80 fb    	ze        [w14], w0
    12c0:	80 00 40    	add.w     w0, w0, w1
    12c2:	80 0c 21    	mov.w     #0x10c8, w0
    12c4:	00 80 40    	add.w     w1, w0, w0
    12c6:	80 00 eb    	clr.w     w1
    12c8:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    12ca:	1e 80 fb    	ze        [w14], w0
    12cc:	80 00 40    	add.w     w0, w0, w1
    12ce:	80 0e 21    	mov.w     #0x10e8, w0
    12d0:	00 80 40    	add.w     w1, w0, w0
    12d2:	80 00 eb    	clr.w     w1
    12d4:	01 08 78    	mov.w     w1, [w0]
    12d6:	1e 4f e8    	inc.b     [w14], [w14]

000012d8 <.L3>:
    12d8:	1e 40 78    	mov.b     [w14], w0
    12da:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    12dc:	ea ff 36    	bra       LEU, 0x12b2 <.L4>
    }
}
    12de:	00 80 fa    	ulnk      
    12e0:	00 00 06    	return    

000012e2 <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    12e2:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    12e4:	c0 0b 21    	mov.w     #0x10bc, w0
    12e6:	10 40 78    	mov.b     [w0], w0
    12e8:	00 80 fb    	ze        w0, w0
    12ea:	b0 24 88    	mov.w     w0, 0x496
    12ec:	b0 24 80    	mov.w     0x496, w0
    12ee:	00 00 e0    	cp0.w     w0
    12f0:	03 00 3a    	bra       NZ, 0x12f8 <.L9>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    12f2:	10 c0 b3    	mov.b     #0x1, w0
    12f4:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    12f6:	02 00 37    	bra       0x12fc <.L8>

000012f8 <.L9>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    12f8:	20 c0 b3    	mov.b     #0x2, w0
    12fa:	10 e8 b7    	mov.b     WREG, 0x810

000012fc <.L8>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    12fc:	00 00 eb    	clr.w     w0
    12fe:	40 86 88    	mov.w     w0, 0x10c8
}
    1300:	00 80 fa    	ulnk      
    1302:	00 00 06    	return    

00001304 <_init_usb>:

void init_usb(void) {
    1304:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    1306:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    1308:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    130a:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    130c:	f0 0f 20    	mov.w     #0xff, w0
    130e:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    1310:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    1312:	00 40 eb    	clr.b     w0
    1314:	c7 ff 07    	rcall     0x12a4 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    1316:	d0 00 20    	mov.w     #0xd, w0
    1318:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    131a:	00 20 21    	mov.w     #0x1200, w0
    131c:	01 c4 b3    	mov.b     #0x40, w1
    131e:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    1320:	a0 03 21    	mov.w     #0x103a, w0
    1322:	10 90 88    	mov.w     w0, 0x1202
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    1324:	10 20 21    	mov.w     #0x1201, w0
    1326:	81 c8 b3    	mov.b     #0x88, w1
    1328:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    132a:	a0 07 21    	mov.w     #0x107a, w0
    132c:	30 90 88    	mov.w     w0, 0x1206
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    132e:	50 20 21    	mov.w     #0x1205, w0
    1330:	81 c0 b3    	mov.b     #0x8, w1
    1332:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    1334:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    1336:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    1338:	00 20 21    	mov.w     #0x1200, w0
    133a:	48 00 de    	lsr.w     w0, #0x8, w0
    133c:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    133e:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    1340:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    1342:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    1344:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    1346:	0d 68 ef    	clr.b     0x80d
    USB_USWSTAT = POWERED_STATE;
    1348:	10 68 ef    	clr.b     0x810
    USB_device_status = 1;
    134a:	10 c0 b3    	mov.b     #0x1, w0
    134c:	0e e8 b7    	mov.b     WREG, 0x80e
    USB_request.setup.bmRequestType = NO_REQUEST;
    134e:	a0 0b 21    	mov.w     #0x10ba, w0
    1350:	80 c0 eb    	setm.b    w1
    1352:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1354:	b0 0b 21    	mov.w     #0x10bb, w0
    1356:	80 c0 eb    	setm.b    w1
    1358:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    135a:	00 00 eb    	clr.w     w0
    135c:	20 86 88    	mov.w     w0, 0x10c4
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    135e:	00 00 eb    	clr.w     w0
    1360:	30 86 88    	mov.w     w0, 0x10c6
    while (U1CONbits.SE0) {}
    1362:	00 00 00    	nop       

00001364 <.L11>:
    1364:	a1 24 80    	mov.w     0x494, w1
    1366:	00 04 20    	mov.w     #0x40, w0
    1368:	00 80 60    	and.w     w1, w0, w0
    136a:	00 00 e0    	cp0.w     w0
    136c:	fb ff 3a    	bra       NZ, 0x1364 <.L11>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    136e:	f0 0f 20    	mov.w     #0xff, w0
    1370:	60 24 88    	mov.w     w0, 0x48c
    U1EIE = 0xFF;
    1372:	f0 0f 20    	mov.w     #0xff, w0
    1374:	80 24 88    	mov.w     w0, 0x490
    IFS5bits.USB1IF = 0;
    1376:	8e c0 a9    	bclr.b    0x8e, #0x6
    IEC5bits.USB1IE = 1;
    1378:	9e c0 a8    	bset.b    0x9e, #0x6
#endif
}
    137a:	00 80 fa    	ulnk      
    137c:	00 00 06    	return    

0000137e <_usb_service>:

void usb_service(void) {
    137e:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    1380:	50 24 80    	mov.w     0x48a, w0
    1382:	62 00 60    	and.w     w0, #0x2, w0
    1384:	00 00 e0    	cp0.w     w0
    1386:	05 00 32    	bra       Z, 0x1392 <.L13>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    1388:	f0 0f 20    	mov.w     #0xff, w0
    138a:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    138c:	20 00 20    	mov.w     #0x2, w0
    138e:	50 24 88    	mov.w     w0, 0x48a
    1390:	ba 00 37    	bra       0x1506 <.L14>

00001392 <.L13>:
    } else if (U1IRbits.SOFIF) {
    1392:	50 24 80    	mov.w     0x48a, w0
    1394:	64 00 60    	and.w     w0, #0x4, w0
    1396:	00 00 e0    	cp0.w     w0
    1398:	03 00 32    	bra       Z, 0x13a0 <.L15>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    139a:	40 00 20    	mov.w     #0x4, w0
    139c:	50 24 88    	mov.w     w0, 0x48a
    139e:	b3 00 37    	bra       0x1506 <.L14>

000013a0 <.L15>:
    } else if (U1IRbits.IDLEIF) {
    13a0:	50 24 80    	mov.w     0x48a, w0
    13a2:	70 00 60    	and.w     w0, #0x10, w0
    13a4:	00 00 e0    	cp0.w     w0
    13a6:	03 00 32    	bra       Z, 0x13ae <.L16>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    13a8:	00 01 20    	mov.w     #0x10, w0
    13aa:	50 24 88    	mov.w     w0, 0x48a
    13ac:	ac 00 37    	bra       0x1506 <.L14>

000013ae <.L16>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    13ae:	51 24 80    	mov.w     0x48a, w1
    13b0:	00 02 20    	mov.w     #0x20, w0
    13b2:	00 80 60    	and.w     w1, w0, w0
    13b4:	00 00 e0    	cp0.w     w0
    13b6:	03 00 32    	bra       Z, 0x13be <.L17>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    13b8:	00 02 20    	mov.w     #0x20, w0
    13ba:	50 24 88    	mov.w     w0, 0x48a
    13bc:	a4 00 37    	bra       0x1506 <.L14>

000013be <.L17>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    13be:	51 24 80    	mov.w     0x48a, w1
    13c0:	00 08 20    	mov.w     #0x80, w0
    13c2:	00 80 60    	and.w     w1, w0, w0
    13c4:	00 00 e0    	cp0.w     w0
    13c6:	03 00 32    	bra       Z, 0x13ce <.L18>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    13c8:	00 08 20    	mov.w     #0x80, w0
    13ca:	50 24 88    	mov.w     w0, 0x48a
    13cc:	9c 00 37    	bra       0x1506 <.L14>

000013ce <.L18>:
    } else if (U1IRbits.URSTIF) {
    13ce:	50 24 80    	mov.w     0x48a, w0
    13d0:	61 00 60    	and.w     w0, #0x1, w0
    13d2:	00 00 e0    	cp0.w     w0
    13d4:	27 00 32    	bra       Z, 0x1424 <.L19>
        USB_curr_config = 0;
    13d6:	0d 68 ef    	clr.b     0x80d
        while (U1IRbits.TRNIF) {
    13d8:	08 00 37    	bra       0x13ea <.L20>

000013da <.L21>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    13da:	80 00 20    	mov.w     #0x8, w0
    13dc:	50 24 88    	mov.w     w0, 0x48a
	...

000013ea <.L20>:
    13ea:	50 24 80    	mov.w     0x48a, w0
    13ec:	68 00 60    	and.w     w0, #0x8, w0
    13ee:	00 00 e0    	cp0.w     w0
    13f0:	f4 ff 3a    	bra       NZ, 0x13da <.L21>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    13f2:	00 40 eb    	clr.b     w0
    13f4:	57 ff 07    	rcall     0x12a4 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    13f6:	00 20 21    	mov.w     #0x1200, w0
    13f8:	01 c4 b3    	mov.b     #0x40, w1
    13fa:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    13fc:	a0 03 21    	mov.w     #0x103a, w0
    13fe:	10 90 88    	mov.w     w0, 0x1202
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    1400:	10 20 21    	mov.w     #0x1201, w0
    1402:	81 c8 b3    	mov.b     #0x88, w1
    1404:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    1406:	a0 07 21    	mov.w     #0x107a, w0
    1408:	30 90 88    	mov.w     w0, 0x1206
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    140a:	50 20 21    	mov.w     #0x1205, w0
    140c:	81 c0 b3    	mov.b     #0x8, w1
    140e:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    1410:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    1412:	f0 0f 20    	mov.w     #0xff, w0
    1414:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    1416:	d0 00 20    	mov.w     #0xd, w0
    1418:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    141a:	10 c0 b3    	mov.b     #0x1, w0
    141c:	10 e8 b7    	mov.b     WREG, 0x810
        USB_device_status = 1;              // self powered, remote wakeup disabled
    141e:	10 c0 b3    	mov.b     #0x1, w0
    1420:	0e e8 b7    	mov.b     WREG, 0x80e
    1422:	71 00 37    	bra       0x1506 <.L14>

00001424 <.L19>:
    } else if (U1IRbits.TRNIF) {
    1424:	50 24 80    	mov.w     0x48a, w0
    1426:	68 00 60    	and.w     w0, #0x8, w0
    1428:	00 00 e0    	cp0.w     w0
    142a:	6d 00 32    	bra       Z, 0x1506 <.L14>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    142c:	90 24 80    	mov.w     0x492, w0
    142e:	43 00 de    	lsr.w     w0, #0x3, w0
    1430:	c2 00 dd    	sl.w      w0, #0x2, w1
    1432:	00 20 21    	mov.w     #0x1200, w0
    1434:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    1436:	1e 00 78    	mov.w     [w14], w0
    1438:	10 40 90    	mov.b     [w0+1], w0
    143a:	01 e8 b7    	mov.b     WREG, 0x801
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    143c:	1e 00 78    	mov.w     [w14], w0
    143e:	10 40 78    	mov.b     [w0], w0
    1440:	00 e8 b7    	mov.b     WREG, 0x800
        USB_buffer_desc.address = buf_desc_ptr->address;
    1442:	1e 00 78    	mov.w     [w14], w0
    1444:	10 00 90    	mov.w     [w0+2], w0
    1446:	10 40 88    	mov.w     w0, 0x802
        USB_USTAT = U1STAT;                 // save the USB status register
    1448:	90 24 80    	mov.w     0x492, w0
    144a:	00 40 78    	mov.b     w0, w0
    144c:	0f e8 b7    	mov.b     WREG, 0x80f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    144e:	80 00 20    	mov.w     #0x8, w0
    1450:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    1452:	0c 68 ef    	clr.b     0x80c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    1454:	01 c8 bf    	mov.b     0x801, WREG
    1456:	80 80 fb    	ze        w0, w1
    1458:	c0 03 20    	mov.w     #0x3c, w0
    145a:	00 80 60    	and.w     w1, w0, w0
    145c:	41 02 20    	mov.w     #0x24, w1
    145e:	81 0f 50    	sub.w     w0, w1, [w15]
    1460:	08 00 32    	bra       Z, 0x1472 <.L24>
    1462:	41 03 20    	mov.w     #0x34, w1
    1464:	81 0f 50    	sub.w     w0, w1, [w15]
    1466:	03 00 32    	bra       Z, 0x146e <.L25>
    1468:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    146a:	17 00 32    	bra       Z, 0x149a <.L23>
    146c:	3d 00 37    	bra       0x14e8 <.L22>

0000146e <.L25>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    146e:	4e 00 07    	rcall     0x150c <_usb_process_setup_token> <.LFB5> <.LFE4>
                break;
    1470:	3b 00 37    	bra       0x14e8 <.L22>

00001472 <.L24>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    1472:	0f c8 bf    	mov.b     0x80f, WREG
    1474:	00 80 fb    	ze        w0, w0
    1476:	44 00 de    	lsr.w     w0, #0x4, w0
    1478:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    147a:	2e 40 90    	mov.b     [w14+2], w0
    147c:	00 80 fb    	ze        w0, w0
    147e:	80 00 40    	add.w     w0, w0, w1
    1480:	80 0c 21    	mov.w     #0x10c8, w0
    1482:	00 80 40    	add.w     w1, w0, w0
    1484:	10 00 78    	mov.w     [w0], w0
    1486:	00 00 e0    	cp0.w     w0
    1488:	2e 00 32    	bra       Z, 0x14e6 <.L28>
                    USB_in_callbacks[ep]();
    148a:	2e 40 90    	mov.b     [w14+2], w0
    148c:	00 80 fb    	ze        w0, w0
    148e:	80 00 40    	add.w     w0, w0, w1
    1490:	80 0c 21    	mov.w     #0x10c8, w0
    1492:	00 80 40    	add.w     w1, w0, w0
    1494:	10 00 78    	mov.w     [w0], w0
    1496:	00 00 01    	call      w0
                break;
    1498:	27 00 37    	bra       0x14e8 <.L22>

0000149a <.L23>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    149a:	0f c8 bf    	mov.b     0x80f, WREG
    149c:	00 80 fb    	ze        w0, w0
    149e:	44 00 de    	lsr.w     w0, #0x4, w0
    14a0:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    14a2:	2e 40 90    	mov.b     [w14+2], w0
    14a4:	00 80 fb    	ze        w0, w0
    14a6:	80 00 40    	add.w     w0, w0, w1
    14a8:	80 0e 21    	mov.w     #0x10e8, w0
    14aa:	00 80 40    	add.w     w1, w0, w0
    14ac:	10 00 78    	mov.w     [w0], w0
    14ae:	00 00 e0    	cp0.w     w0
    14b0:	07 00 32    	bra       Z, 0x14c0 <.L27>
                    USB_out_callbacks[ep]();
    14b2:	2e 40 90    	mov.b     [w14+2], w0
    14b4:	00 80 fb    	ze        w0, w0
    14b6:	80 00 40    	add.w     w0, w0, w1
    14b8:	80 0e 21    	mov.w     #0x10e8, w0
    14ba:	00 80 40    	add.w     w1, w0, w0
    14bc:	10 00 78    	mov.w     [w0], w0
    14be:	00 00 01    	call      w0

000014c0 <.L27>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    14c0:	2e 40 90    	mov.b     [w14+2], w0
    14c2:	00 04 e0    	cp0.b     w0
    14c4:	11 00 3a    	bra       NZ, 0x14e8 <.L22>
    14c6:	20 86 80    	mov.w     0x10c4, w0
    14c8:	00 00 e0    	cp0.w     w0
    14ca:	0e 00 3a    	bra       NZ, 0x14e8 <.L22>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    14cc:	00 20 21    	mov.w     #0x1200, w0
    14ce:	01 c4 b3    	mov.b     #0x40, w1
    14d0:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    14d2:	10 20 21    	mov.w     #0x1201, w0
    14d4:	81 c8 b3    	mov.b     #0x88, w1
    14d6:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    14d8:	40 20 21    	mov.w     #0x1204, w0
    14da:	80 40 eb    	clr.b     w1
    14dc:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    14de:	50 20 21    	mov.w     #0x1205, w0
    14e0:	81 cc b3    	mov.b     #0xc8, w1
    14e2:	01 48 78    	mov.b     w1, [w0]
    14e4:	01 00 37    	bra       0x14e8 <.L22>

000014e6 <.L28>:
    14e6:	00 00 00    	nop       

000014e8 <.L22>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    14e8:	0c c8 bf    	mov.b     0x80c, WREG
    14ea:	00 80 fb    	ze        w0, w0
    14ec:	61 00 60    	and.w     w0, #0x1, w0
    14ee:	00 40 78    	mov.b     w0, w0
    14f0:	00 04 e0    	cp0.b     w0
    14f2:	09 00 32    	bra       Z, 0x1506 <.L14>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    14f4:	00 20 21    	mov.w     #0x1200, w0
    14f6:	01 c4 b3    	mov.b     #0x40, w1
    14f8:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    14fa:	50 20 21    	mov.w     #0x1205, w0
    14fc:	41 c8 b3    	mov.b     #0x84, w1
    14fe:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    1500:	10 20 21    	mov.w     #0x1201, w0
    1502:	41 c8 b3    	mov.b     #0x84, w1
    1504:	01 48 78    	mov.b     w1, [w0]

00001506 <.L14>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    1506:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    1508:	00 80 fa    	ulnk      
    150a:	00 00 06    	return    

0000150c <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    150c:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    150e:	11 40 80    	mov.w     0x802, w1
    1510:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    1512:	1e 00 78    	mov.w     [w14], w0
    1514:	90 40 78    	mov.b     [w0], w1
    1516:	40 80 20    	mov.w     #0x804, w0
    1518:	01 48 78    	mov.b     w1, [w0]
    151a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    151c:	1e 00 78    	mov.w     [w14], w0
    151e:	90 40 78    	mov.b     [w0], w1
    1520:	40 80 20    	mov.w     #0x804, w0
    1522:	11 40 98    	mov.b     w1, [w0+1]
    1524:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    1526:	1e 00 78    	mov.w     [w14], w0
    1528:	90 40 78    	mov.b     [w0], w1
    152a:	40 80 20    	mov.w     #0x804, w0
    152c:	21 40 98    	mov.b     w1, [w0+2]
    152e:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    1530:	1e 00 78    	mov.w     [w14], w0
    1532:	90 40 78    	mov.b     [w0], w1
    1534:	40 80 20    	mov.w     #0x804, w0
    1536:	31 40 98    	mov.b     w1, [w0+3]
    1538:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    153a:	1e 00 78    	mov.w     [w14], w0
    153c:	90 40 78    	mov.b     [w0], w1
    153e:	40 80 20    	mov.w     #0x804, w0
    1540:	41 40 98    	mov.b     w1, [w0+4]
    1542:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    1544:	1e 00 78    	mov.w     [w14], w0
    1546:	90 40 78    	mov.b     [w0], w1
    1548:	40 80 20    	mov.w     #0x804, w0
    154a:	51 40 98    	mov.b     w1, [w0+5]
    154c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    154e:	1e 00 78    	mov.w     [w14], w0
    1550:	90 40 78    	mov.b     [w0], w1
    1552:	40 80 20    	mov.w     #0x804, w0
    1554:	61 40 98    	mov.b     w1, [w0+6]
    1556:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    1558:	1e 00 78    	mov.w     [w14], w0
    155a:	90 40 78    	mov.b     [w0], w1
    155c:	40 80 20    	mov.w     #0x804, w0
    155e:	71 40 98    	mov.b     w1, [w0+7]
    1560:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    1562:	00 20 21    	mov.w     #0x1200, w0
    1564:	01 c4 b3    	mov.b     #0x40, w1
    1566:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    1568:	50 20 21    	mov.w     #0x1205, w0
    156a:	81 c0 b3    	mov.b     #0x8, w1
    156c:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    156e:	40 80 20    	mov.w     #0x804, w0
    1570:	10 40 78    	mov.b     [w0], w0
    1572:	00 04 e0    	cp0.b     w0
    1574:	06 00 35    	bra       LT, 0x1582 <.L30>
    1576:	40 80 20    	mov.w     #0x804, w0
    1578:	30 00 90    	mov.w     [w0+6], w0
    157a:	00 00 e0    	cp0.w     w0
    157c:	02 00 32    	bra       Z, 0x1582 <.L30>
    157e:	80 cc b3    	mov.b     #0xc8, w0
    1580:	01 00 37    	bra       0x1584 <.L31>

00001582 <.L30>:
    1582:	80 c8 b3    	mov.b     #0x88, w0

00001584 <.L31>:
    1584:	11 20 21    	mov.w     #0x1201, w1
    1586:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    1588:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    158a:	a0 0b 21    	mov.w     #0x10ba, w0
    158c:	80 c0 eb    	setm.b    w1
    158e:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1590:	b0 0b 21    	mov.w     #0x10bb, w0
    1592:	80 c0 eb    	setm.b    w1
    1594:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    1596:	00 00 eb    	clr.w     w0
    1598:	20 86 88    	mov.w     w0, 0x10c4
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    159a:	00 00 eb    	clr.w     w0
    159c:	30 86 88    	mov.w     w0, 0x10c6
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    159e:	40 80 20    	mov.w     #0x804, w0
    15a0:	10 40 78    	mov.b     [w0], w0
    15a2:	80 80 fb    	ze        w0, w1
    15a4:	00 06 20    	mov.w     #0x60, w0
    15a6:	00 80 60    	and.w     w1, w0, w0
    15a8:	01 02 20    	mov.w     #0x20, w1
    15aa:	81 0f 50    	sub.w     w0, w1, [w15]
    15ac:	11 00 32    	bra       Z, 0x15d0 <.L34>
    15ae:	01 04 20    	mov.w     #0x40, w1
    15b0:	81 0f 50    	sub.w     w0, w1, [w15]
    15b2:	04 00 32    	bra       Z, 0x15bc <.L35>
    15b4:	00 00 e0    	cp0.w     w0
    15b6:	16 00 3a    	bra       NZ, 0x15e4 <.L41>
        case STANDARD_REQ:
            usb_standard_requests();
    15b8:	1a 00 07    	rcall     0x15ee <_usb_standard_requests> <.LFB6> <.LFE5>
            break;
    15ba:	17 00 37    	bra       0x15ea <.L29>

000015bc <.L35>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    15bc:	c0 40 80    	mov.w     0x818, w0
    15be:	00 00 e0    	cp0.w     w0
    15c0:	03 00 32    	bra       Z, 0x15c8 <.L37>
                USB_setup_vendor_callback();
    15c2:	c0 40 80    	mov.w     0x818, w0
    15c4:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    15c6:	11 00 37    	bra       0x15ea <.L29>

000015c8 <.L37>:
    15c8:	0c c8 bf    	mov.b     0x80c, WREG
    15ca:	00 04 a0    	bset.b    w0, #0x0
    15cc:	0c e8 b7    	mov.b     WREG, 0x80c
    15ce:	0d 00 37    	bra       0x15ea <.L29>

000015d0 <.L34>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    15d0:	b0 40 80    	mov.w     0x816, w0
    15d2:	00 00 e0    	cp0.w     w0
    15d4:	03 00 32    	bra       Z, 0x15dc <.L39>
                USB_setup_class_callback();
    15d6:	b0 40 80    	mov.w     0x816, w0
    15d8:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    15da:	07 00 37    	bra       0x15ea <.L29>

000015dc <.L39>:
    15dc:	0c c8 bf    	mov.b     0x80c, WREG
    15de:	00 04 a0    	bset.b    w0, #0x0
    15e0:	0c e8 b7    	mov.b     WREG, 0x80c
    15e2:	03 00 37    	bra       0x15ea <.L29>

000015e4 <.L41>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    15e4:	0c c8 bf    	mov.b     0x80c, WREG
    15e6:	00 04 a0    	bset.b    w0, #0x0
    15e8:	0c e8 b7    	mov.b     WREG, 0x80c

000015ea <.L29>:
    }
}
    15ea:	00 80 fa    	ulnk      
    15ec:	00 00 06    	return    

000015ee <_usb_standard_requests>:

void usb_standard_requests(void) {
    15ee:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    15f0:	40 80 20    	mov.w     #0x804, w0
    15f2:	10 40 90    	mov.b     [w0+1], w0
    15f4:	00 80 fb    	ze        w0, w0
    15f6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    15f8:	ba 01 32    	bra       Z, 0x196e <.L47>
    15fa:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    15fc:	0c 00 3c    	bra       GT, 0x1616 <.L52>
    15fe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1600:	c1 00 32    	bra       Z, 0x1784 <.L45>
    1602:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1604:	03 00 3c    	bra       GT, 0x160c <.L53>
    1606:	00 00 e0    	cp0.w     w0
    1608:	12 00 32    	bra       Z, 0x162e <.L44>
    160a:	85 02 37    	bra       0x1b16 <.L43>

0000160c <.L53>:
    160c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    160e:	ba 00 32    	bra       Z, 0x1784 <.L45>
    1610:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1612:	8b 01 32    	bra       Z, 0x192a <.L46>
    1614:	80 02 37    	bra       0x1b16 <.L43>

00001616 <.L52>:
    1616:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1618:	20 02 32    	bra       Z, 0x1a5a <.L49>
    161a:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    161c:	03 00 3c    	bra       GT, 0x1624 <.L54>
    161e:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1620:	11 02 32    	bra       Z, 0x1a44 <.L48>
    1622:	79 02 37    	bra       0x1b16 <.L43>

00001624 <.L54>:
    1624:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    1626:	3b 02 32    	bra       Z, 0x1a9e <.L50>
    1628:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    162a:	54 02 32    	bra       Z, 0x1ad4 <.L51>
    162c:	74 02 37    	bra       0x1b16 <.L43>

0000162e <.L44>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    162e:	40 80 20    	mov.w     #0x804, w0
    1630:	10 40 78    	mov.b     [w0], w0
    1632:	00 80 fb    	ze        w0, w0
    1634:	7f 00 60    	and.w     w0, #0x1f, w0
    1636:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1638:	13 00 32    	bra       Z, 0x1660 <.L57>
    163a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    163c:	32 00 32    	bra       Z, 0x16a2 <.L58>
    163e:	00 00 e0    	cp0.w     w0
    1640:	9c 00 3a    	bra       NZ, 0x177a <.L134>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    1642:	30 90 80    	mov.w     0x1206, w0
    1644:	e1 80 20    	mov.w     #0x80e, w1
    1646:	91 40 78    	mov.b     [w1], w1
    1648:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    164a:	30 90 80    	mov.w     0x1206, w0
    164c:	00 00 e8    	inc.w     w0, w0
    164e:	80 40 eb    	clr.b     w1
    1650:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    1652:	40 20 21    	mov.w     #0x1204, w0
    1654:	21 c0 b3    	mov.b     #0x2, w1
    1656:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1658:	50 20 21    	mov.w     #0x1205, w0
    165a:	81 cc b3    	mov.b     #0xc8, w1
    165c:	01 48 78    	mov.b     w1, [w0]
                    break;
    165e:	91 00 37    	bra       0x1782 <.L59>

00001660 <.L57>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    1660:	10 c8 bf    	mov.b     0x810, WREG
    1662:	00 80 fb    	ze        w0, w0
    1664:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1666:	03 00 32    	bra       Z, 0x166e <.L61>
    1668:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    166a:	05 00 32    	bra       Z, 0x1676 <.L62>
    166c:	19 00 37    	bra       0x16a0 <.L60>

0000166e <.L61>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    166e:	0c c8 bf    	mov.b     0x80c, WREG
    1670:	00 04 a0    	bset.b    w0, #0x0
    1672:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    1674:	15 00 37    	bra       0x16a0 <.L60>

00001676 <.L62>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1676:	40 80 20    	mov.w     #0x804, w0
    1678:	40 40 90    	mov.b     [w0+4], w0
    167a:	00 04 e0    	cp0.b     w0
    167c:	0e 00 3a    	bra       NZ, 0x169a <.L63>
                                BD[EP0IN].address[0] = 0;
    167e:	30 90 80    	mov.w     0x1206, w0
    1680:	80 40 eb    	clr.b     w1
    1682:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    1684:	30 90 80    	mov.w     0x1206, w0
    1686:	00 00 e8    	inc.w     w0, w0
    1688:	80 40 eb    	clr.b     w1
    168a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    168c:	40 20 21    	mov.w     #0x1204, w0
    168e:	21 c0 b3    	mov.b     #0x2, w1
    1690:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1692:	50 20 21    	mov.w     #0x1205, w0
    1694:	81 cc b3    	mov.b     #0xc8, w1
    1696:	01 48 78    	mov.b     w1, [w0]
    1698:	03 00 37    	bra       0x16a0 <.L60>

0000169a <.L63>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    169a:	0c c8 bf    	mov.b     0x80c, WREG
    169c:	00 04 a0    	bset.b    w0, #0x0
    169e:	0c e8 b7    	mov.b     WREG, 0x80c

000016a0 <.L60>:
                            }
                    }
                    break;
    16a0:	70 00 37    	bra       0x1782 <.L59>

000016a2 <.L58>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    16a2:	10 c8 bf    	mov.b     0x810, WREG
    16a4:	00 80 fb    	ze        w0, w0
    16a6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    16a8:	03 00 32    	bra       Z, 0x16b0 <.L65>
    16aa:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    16ac:	29 00 32    	bra       Z, 0x1700 <.L66>
    16ae:	61 00 37    	bra       0x1772 <.L135>

000016b0 <.L65>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    16b0:	40 80 20    	mov.w     #0x804, w0
    16b2:	40 40 90    	mov.b     [w0+4], w0
    16b4:	00 80 fb    	ze        w0, w0
    16b6:	6f 00 60    	and.w     w0, #0xf, w0
    16b8:	00 00 e0    	cp0.w     w0
    16ba:	1e 00 3a    	bra       NZ, 0x16f8 <.L67>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    16bc:	31 90 80    	mov.w     0x1206, w1
    16be:	40 80 20    	mov.w     #0x804, w0
    16c0:	40 40 90    	mov.b     [w0+4], w0
    16c2:	00 04 e0    	cp0.b     w0
    16c4:	07 00 3d    	bra       GE, 0x16d4 <.L68>
    16c6:	50 20 21    	mov.w     #0x1205, w0
    16c8:	10 40 78    	mov.b     [w0], w0
    16ca:	00 80 fb    	ze        w0, w0
    16cc:	64 00 60    	and.w     w0, #0x4, w0
    16ce:	42 80 de    	asr.w     w0, #0x2, w0
    16d0:	00 40 78    	mov.b     w0, w0
    16d2:	06 00 37    	bra       0x16e0 <.L69>

000016d4 <.L68>:
    16d4:	10 20 21    	mov.w     #0x1201, w0
    16d6:	10 40 78    	mov.b     [w0], w0
    16d8:	00 80 fb    	ze        w0, w0
    16da:	64 00 60    	and.w     w0, #0x4, w0
    16dc:	42 80 de    	asr.w     w0, #0x2, w0
    16de:	00 40 78    	mov.b     w0, w0

000016e0 <.L69>:
    16e0:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    16e2:	30 90 80    	mov.w     0x1206, w0
    16e4:	00 00 e8    	inc.w     w0, w0
    16e6:	80 40 eb    	clr.b     w1
    16e8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    16ea:	40 20 21    	mov.w     #0x1204, w0
    16ec:	21 c0 b3    	mov.b     #0x2, w1
    16ee:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    16f0:	50 20 21    	mov.w     #0x1205, w0
    16f2:	81 cc b3    	mov.b     #0xc8, w1
    16f4:	01 48 78    	mov.b     w1, [w0]
    16f6:	03 00 37    	bra       0x16fe <.L70>

000016f8 <.L67>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    16f8:	0c c8 bf    	mov.b     0x80c, WREG
    16fa:	00 04 a0    	bset.b    w0, #0x0
    16fc:	0c e8 b7    	mov.b     WREG, 0x80c

000016fe <.L70>:
                            }
                            break;
    16fe:	3c 00 37    	bra       0x1778 <.L71>

00001700 <.L66>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    1700:	a0 4a 20    	mov.w     #0x4aa, w0
    1702:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    1704:	40 80 20    	mov.w     #0x804, w0
    1706:	40 40 90    	mov.b     [w0+4], w0
    1708:	6f 40 60    	and.b     w0, #0xf, w0
    170a:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    170c:	2e 40 90    	mov.b     [w14+2], w0
    170e:	00 80 fb    	ze        w0, w0
    1710:	00 00 40    	add.w     w0, w0, w0
    1712:	80 00 78    	mov.w     w0, w1
    1714:	40 80 20    	mov.w     #0x804, w0
    1716:	40 40 90    	mov.b     [w0+4], w0
    1718:	00 00 fb    	se        w0, w0
    171a:	4f 00 de    	lsr.w     w0, #0xf, w0
    171c:	01 00 70    	ior.w     w0, w1, w0
    171e:	c2 00 dd    	sl.w      w0, #0x2, w1
    1720:	00 20 21    	mov.w     #0x1200, w0
    1722:	00 80 40    	add.w     w1, w0, w0
    1724:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    1726:	2e 40 90    	mov.b     [w14+2], w0
    1728:	00 80 fb    	ze        w0, w0
    172a:	00 00 40    	add.w     w0, w0, w0
    172c:	1e 00 40    	add.w     w0, [w14], w0
    172e:	90 00 78    	mov.w     [w0], w1
    1730:	40 80 20    	mov.w     #0x804, w0
    1732:	40 40 90    	mov.b     [w0+4], w0
    1734:	00 04 e0    	cp0.b     w0
    1736:	02 00 3d    	bra       GE, 0x173c <.L72>
    1738:	40 00 20    	mov.w     #0x4, w0
    173a:	01 00 37    	bra       0x173e <.L73>

0000173c <.L72>:
    173c:	80 00 20    	mov.w     #0x8, w0

0000173e <.L73>:
    173e:	00 80 60    	and.w     w1, w0, w0
    1740:	00 00 e0    	cp0.w     w0
    1742:	13 00 32    	bra       Z, 0x176a <.L74>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    1744:	30 90 80    	mov.w     0x1206, w0
    1746:	ae 00 90    	mov.w     [w14+4], w1
    1748:	91 40 90    	mov.b     [w1+1], w1
    174a:	81 80 fb    	ze        w1, w1
    174c:	e4 80 60    	and.w     w1, #0x4, w1
    174e:	c2 88 de    	asr.w     w1, #0x2, w1
    1750:	81 40 78    	mov.b     w1, w1
    1752:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    1754:	30 90 80    	mov.w     0x1206, w0
    1756:	00 00 e8    	inc.w     w0, w0
    1758:	80 40 eb    	clr.b     w1
    175a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    175c:	40 20 21    	mov.w     #0x1204, w0
    175e:	21 c0 b3    	mov.b     #0x2, w1
    1760:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1762:	50 20 21    	mov.w     #0x1205, w0
    1764:	81 cc b3    	mov.b     #0xc8, w1
    1766:	01 48 78    	mov.b     w1, [w0]
    1768:	03 00 37    	bra       0x1770 <.L75>

0000176a <.L74>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    176a:	0c c8 bf    	mov.b     0x80c, WREG
    176c:	00 04 a0    	bset.b    w0, #0x0
    176e:	0c e8 b7    	mov.b     WREG, 0x80c

00001770 <.L75>:
                            }
                            break;
    1770:	03 00 37    	bra       0x1778 <.L71>

00001772 <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    1772:	0c c8 bf    	mov.b     0x80c, WREG
    1774:	00 04 a0    	bset.b    w0, #0x0
    1776:	0c e8 b7    	mov.b     WREG, 0x80c

00001778 <.L71>:
                    }
                    break;
    1778:	04 00 37    	bra       0x1782 <.L59>

0000177a <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    177a:	0c c8 bf    	mov.b     0x80c, WREG
    177c:	00 04 a0    	bset.b    w0, #0x0
    177e:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    1780:	cf 01 37    	bra       0x1b20 <.L42>

00001782 <.L59>:
    1782:	ce 01 37    	bra       0x1b20 <.L42>

00001784 <.L45>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    1784:	40 80 20    	mov.w     #0x804, w0
    1786:	10 40 78    	mov.b     [w0], w0
    1788:	00 80 fb    	ze        w0, w0
    178a:	7f 00 60    	and.w     w0, #0x1f, w0
    178c:	00 00 e0    	cp0.w     w0
    178e:	03 00 32    	bra       Z, 0x1796 <.L78>
    1790:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1792:	1c 00 32    	bra       Z, 0x17cc <.L79>
    1794:	c5 00 37    	bra       0x1920 <.L136>

00001796 <.L78>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    1796:	40 80 20    	mov.w     #0x804, w0
    1798:	20 40 90    	mov.b     [w0+2], w0
    179a:	00 80 fb    	ze        w0, w0
    179c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    179e:	12 00 3a    	bra       NZ, 0x17c4 <.L137>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    17a0:	40 80 20    	mov.w     #0x804, w0
    17a2:	10 40 90    	mov.b     [w0+1], w0
    17a4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    17a6:	04 00 3a    	bra       NZ, 0x17b0 <.L82>
                                USB_device_status &= 0xFE;
    17a8:	0e c8 bf    	mov.b     0x80e, WREG
    17aa:	00 04 a1    	bclr.b    w0, #0x0
    17ac:	0e e8 b7    	mov.b     WREG, 0x80e
    17ae:	03 00 37    	bra       0x17b6 <.L83>

000017b0 <.L82>:
                            else
                                USB_device_status |= 0x01;
    17b0:	0e c8 bf    	mov.b     0x80e, WREG
    17b2:	00 04 a0    	bset.b    w0, #0x0
    17b4:	0e e8 b7    	mov.b     WREG, 0x80e

000017b6 <.L83>:
                            BD[EP0IN].bytecount = 0;
    17b6:	40 20 21    	mov.w     #0x1204, w0
    17b8:	80 40 eb    	clr.b     w1
    17ba:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    17bc:	50 20 21    	mov.w     #0x1205, w0
    17be:	81 cc b3    	mov.b     #0xc8, w1
    17c0:	01 48 78    	mov.b     w1, [w0]
                            break;
    17c2:	03 00 37    	bra       0x17ca <.L84>

000017c4 <.L137>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    17c4:	0c c8 bf    	mov.b     0x80c, WREG
    17c6:	00 04 a0    	bset.b    w0, #0x0
    17c8:	0c e8 b7    	mov.b     WREG, 0x80c

000017ca <.L84>:
                    }
                    break;
    17ca:	ae 00 37    	bra       0x1928 <.L85>

000017cc <.L79>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    17cc:	10 c8 bf    	mov.b     0x810, WREG
    17ce:	00 80 fb    	ze        w0, w0
    17d0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    17d2:	03 00 32    	bra       Z, 0x17da <.L87>
    17d4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    17d6:	12 00 32    	bra       Z, 0x17fc <.L88>
    17d8:	9f 00 37    	bra       0x1918 <.L138>

000017da <.L87>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    17da:	40 80 20    	mov.w     #0x804, w0
    17dc:	40 40 90    	mov.b     [w0+4], w0
    17de:	00 80 fb    	ze        w0, w0
    17e0:	6f 00 60    	and.w     w0, #0xf, w0
    17e2:	00 00 e0    	cp0.w     w0
    17e4:	07 00 3a    	bra       NZ, 0x17f4 <.L89>
                                BD[EP0IN].bytecount = 0;
    17e6:	40 20 21    	mov.w     #0x1204, w0
    17e8:	80 40 eb    	clr.b     w1
    17ea:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    17ec:	50 20 21    	mov.w     #0x1205, w0
    17ee:	81 cc b3    	mov.b     #0xc8, w1
    17f0:	01 48 78    	mov.b     w1, [w0]
    17f2:	03 00 37    	bra       0x17fa <.L90>

000017f4 <.L89>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    17f4:	0c c8 bf    	mov.b     0x80c, WREG
    17f6:	00 04 a0    	bset.b    w0, #0x0
    17f8:	0c e8 b7    	mov.b     WREG, 0x80c

000017fa <.L90>:
                            }
                            break;
    17fa:	91 00 37    	bra       0x191e <.L91>

000017fc <.L88>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    17fc:	a0 4a 20    	mov.w     #0x4aa, w0
    17fe:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    1800:	40 80 20    	mov.w     #0x804, w0
    1802:	40 40 90    	mov.b     [w0+4], w0
    1804:	6f 40 60    	and.b     w0, #0xf, w0
    1806:	20 47 98    	mov.b     w0, [w14+2]
    1808:	2e 40 90    	mov.b     [w14+2], w0
    180a:	00 04 e0    	cp0.b     w0
    180c:	79 00 32    	bra       Z, 0x1900 <.L92>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    180e:	2e 40 90    	mov.b     [w14+2], w0
    1810:	00 80 fb    	ze        w0, w0
    1812:	00 00 40    	add.w     w0, w0, w0
    1814:	80 00 78    	mov.w     w0, w1
    1816:	40 80 20    	mov.w     #0x804, w0
    1818:	40 40 90    	mov.b     [w0+4], w0
    181a:	00 00 fb    	se        w0, w0
    181c:	4f 00 de    	lsr.w     w0, #0xf, w0
    181e:	01 00 70    	ior.w     w0, w1, w0
    1820:	c2 00 dd    	sl.w      w0, #0x2, w1
    1822:	00 20 21    	mov.w     #0x1200, w0
    1824:	00 80 40    	add.w     w1, w0, w0
    1826:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    1828:	40 80 20    	mov.w     #0x804, w0
    182a:	40 40 90    	mov.b     [w0+4], w0
    182c:	00 04 e0    	cp0.b     w0
    182e:	30 00 3d    	bra       GE, 0x1890 <.L93>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    1830:	2e 40 90    	mov.b     [w14+2], w0
    1832:	00 80 fb    	ze        w0, w0
    1834:	00 00 40    	add.w     w0, w0, w0
    1836:	1e 00 40    	add.w     w0, [w14], w0
    1838:	10 00 78    	mov.w     [w0], w0
    183a:	64 00 60    	and.w     w0, #0x4, w0
    183c:	00 00 e0    	cp0.w     w0
    183e:	24 00 32    	bra       Z, 0x1888 <.L94>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    1840:	40 80 20    	mov.w     #0x804, w0
    1842:	10 40 90    	mov.b     [w0+1], w0
    1844:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1846:	19 00 3a    	bra       NZ, 0x187a <.L95>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    1848:	2e 40 90    	mov.b     [w14+2], w0
    184a:	00 80 fb    	ze        w0, w0
    184c:	00 00 40    	add.w     w0, w0, w0
    184e:	9e 00 40    	add.w     w0, [w14], w1
    1850:	2e 40 90    	mov.b     [w14+2], w0
    1852:	00 80 fb    	ze        w0, w0
    1854:	00 00 40    	add.w     w0, w0, w0
    1856:	1e 00 40    	add.w     w0, [w14], w0
    1858:	10 01 78    	mov.w     [w0], w2
    185a:	d0 0f 20    	mov.w     #0xfd, w0
    185c:	00 00 61    	and.w     w2, w0, w0
    185e:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    1860:	2e 00 90    	mov.w     [w14+4], w0
    1862:	10 40 90    	mov.b     [w0+1], w0
    1864:	80 40 78    	mov.b     w0, w1
    1866:	01 24 a1    	bclr.b    w1, #0x2
    1868:	2e 00 90    	mov.w     [w14+4], w0
    186a:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status |= DTS;
    186c:	2e 00 90    	mov.w     [w14+4], w0
    186e:	10 40 90    	mov.b     [w0+1], w0
    1870:	80 40 78    	mov.b     w0, w1
    1872:	01 64 a0    	bset.b    w1, #0x6
    1874:	2e 00 90    	mov.w     [w14+4], w0
    1876:	11 40 98    	mov.b     w1, [w0+1]
    1878:	43 00 37    	bra       0x1900 <.L92>

0000187a <.L95>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    187a:	2e 00 90    	mov.w     [w14+4], w0
    187c:	10 40 90    	mov.b     [w0+1], w0
    187e:	80 40 78    	mov.b     w0, w1
    1880:	01 24 a0    	bset.b    w1, #0x2
    1882:	2e 00 90    	mov.w     [w14+4], w0
    1884:	11 40 98    	mov.b     w1, [w0+1]
    1886:	3c 00 37    	bra       0x1900 <.L92>

00001888 <.L94>:
                                        }
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    1888:	0c c8 bf    	mov.b     0x80c, WREG
    188a:	00 04 a0    	bset.b    w0, #0x0
    188c:	0c e8 b7    	mov.b     WREG, 0x80c
    188e:	38 00 37    	bra       0x1900 <.L92>

00001890 <.L93>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    1890:	2e 40 90    	mov.b     [w14+2], w0
    1892:	00 80 fb    	ze        w0, w0
    1894:	00 00 40    	add.w     w0, w0, w0
    1896:	1e 00 40    	add.w     w0, [w14], w0
    1898:	10 00 78    	mov.w     [w0], w0
    189a:	68 00 60    	and.w     w0, #0x8, w0
    189c:	00 00 e0    	cp0.w     w0
    189e:	2d 00 32    	bra       Z, 0x18fa <.L96>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    18a0:	40 80 20    	mov.w     #0x804, w0
    18a2:	10 40 90    	mov.b     [w0+1], w0
    18a4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    18a6:	19 00 3a    	bra       NZ, 0x18da <.L97>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    18a8:	2e 40 90    	mov.b     [w14+2], w0
    18aa:	00 80 fb    	ze        w0, w0
    18ac:	00 00 40    	add.w     w0, w0, w0
    18ae:	9e 00 40    	add.w     w0, [w14], w1
    18b0:	2e 40 90    	mov.b     [w14+2], w0
    18b2:	00 80 fb    	ze        w0, w0
    18b4:	00 00 40    	add.w     w0, w0, w0
    18b6:	1e 00 40    	add.w     w0, [w14], w0
    18b8:	10 01 78    	mov.w     [w0], w2
    18ba:	d0 0f 20    	mov.w     #0xfd, w0
    18bc:	00 00 61    	and.w     w2, w0, w0
    18be:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    18c0:	2e 00 90    	mov.w     [w14+4], w0
    18c2:	10 40 90    	mov.b     [w0+1], w0
    18c4:	80 40 78    	mov.b     w0, w1
    18c6:	01 24 a1    	bclr.b    w1, #0x2
    18c8:	2e 00 90    	mov.w     [w14+4], w0
    18ca:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status &= ~DTS;
    18cc:	2e 00 90    	mov.w     [w14+4], w0
    18ce:	10 40 90    	mov.b     [w0+1], w0
    18d0:	80 40 78    	mov.b     w0, w1
    18d2:	01 64 a1    	bclr.b    w1, #0x6
    18d4:	2e 00 90    	mov.w     [w14+4], w0
    18d6:	11 40 98    	mov.b     w1, [w0+1]
    18d8:	06 00 37    	bra       0x18e6 <.L98>

000018da <.L97>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    18da:	2e 00 90    	mov.w     [w14+4], w0
    18dc:	10 40 90    	mov.b     [w0+1], w0
    18de:	80 40 78    	mov.b     w0, w1
    18e0:	01 24 a0    	bset.b    w1, #0x2
    18e2:	2e 00 90    	mov.w     [w14+4], w0
    18e4:	11 40 98    	mov.b     w1, [w0+1]

000018e6 <.L98>:
                                        }
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    18e6:	40 80 20    	mov.w     #0x804, w0
    18e8:	10 40 90    	mov.b     [w0+1], w0
    18ea:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    18ec:	02 00 3a    	bra       NZ, 0x18f2 <.L99>
    18ee:	80 c8 b3    	mov.b     #0x88, w0
    18f0:	01 00 37    	bra       0x18f4 <.L100>

000018f2 <.L99>:
    18f2:	40 c8 b3    	mov.b     #0x84, w0

000018f4 <.L100>:
    18f4:	ae 00 90    	mov.w     [w14+4], w1
    18f6:	90 40 98    	mov.b     w0, [w1+1]
    18f8:	03 00 37    	bra       0x1900 <.L92>

000018fa <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    18fa:	0c c8 bf    	mov.b     0x80c, WREG
    18fc:	00 04 a0    	bset.b    w0, #0x0
    18fe:	0c e8 b7    	mov.b     WREG, 0x80c

00001900 <.L92>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    1900:	0c c8 bf    	mov.b     0x80c, WREG
    1902:	00 80 fb    	ze        w0, w0
    1904:	61 00 60    	and.w     w0, #0x1, w0
    1906:	00 00 e0    	cp0.w     w0
    1908:	06 00 3a    	bra       NZ, 0x1916 <.L101>
                                BD[EP0IN].bytecount = 0;
    190a:	40 20 21    	mov.w     #0x1204, w0
    190c:	80 40 eb    	clr.b     w1
    190e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    1910:	50 20 21    	mov.w     #0x1205, w0
    1912:	81 cc b3    	mov.b     #0xc8, w1
    1914:	01 48 78    	mov.b     w1, [w0]

00001916 <.L101>:
                            }
                            break;
    1916:	03 00 37    	bra       0x191e <.L91>

00001918 <.L138>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    1918:	0c c8 bf    	mov.b     0x80c, WREG
    191a:	00 04 a0    	bset.b    w0, #0x0
    191c:	0c e8 b7    	mov.b     WREG, 0x80c

0000191e <.L91>:
                    }
                    break;
    191e:	04 00 37    	bra       0x1928 <.L85>

00001920 <.L136>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    1920:	0c c8 bf    	mov.b     0x80c, WREG
    1922:	00 04 a0    	bset.b    w0, #0x0
    1924:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    1926:	fc 00 37    	bra       0x1b20 <.L42>

00001928 <.L85>:
    1928:	fb 00 37    	bra       0x1b20 <.L42>

0000192a <.L46>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    192a:	40 80 20    	mov.w     #0x804, w0
    192c:	20 40 90    	mov.b     [w0+2], w0
    192e:	00 04 e0    	cp0.b     w0
    1930:	04 00 3d    	bra       GE, 0x193a <.L102>
                USB_error_flags |= REQUEST_ERROR;
    1932:	0c c8 bf    	mov.b     0x80c, WREG
    1934:	00 04 a0    	bset.b    w0, #0x0
    1936:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    1938:	f3 00 37    	bra       0x1b20 <.L42>

0000193a <.L102>:
    193a:	40 80 20    	mov.w     #0x804, w0
    193c:	90 40 78    	mov.b     [w0], w1
    193e:	a0 0b 21    	mov.w     #0x10ba, w0
    1940:	01 48 78    	mov.b     w1, [w0]
    1942:	40 80 20    	mov.w     #0x804, w0
    1944:	90 40 90    	mov.b     [w0+1], w1
    1946:	b0 0b 21    	mov.w     #0x10bb, w0
    1948:	01 48 78    	mov.b     w1, [w0]
    194a:	40 80 20    	mov.w     #0x804, w0
    194c:	10 00 90    	mov.w     [w0+2], w0
    194e:	e0 85 88    	mov.w     w0, 0x10bc
    1950:	40 80 20    	mov.w     #0x804, w0
    1952:	20 00 90    	mov.w     [w0+4], w0
    1954:	f0 85 88    	mov.w     w0, 0x10be
    1956:	40 80 20    	mov.w     #0x804, w0
    1958:	30 00 90    	mov.w     [w0+6], w0
    195a:	00 86 88    	mov.w     w0, 0x10c0
    195c:	20 2e 21    	mov.w     #0x12e2, w0
    195e:	40 86 88    	mov.w     w0, 0x10c8
    1960:	40 20 21    	mov.w     #0x1204, w0
    1962:	80 40 eb    	clr.b     w1
    1964:	01 48 78    	mov.b     w1, [w0]
    1966:	50 20 21    	mov.w     #0x1205, w0
    1968:	81 cc b3    	mov.b     #0xc8, w1
    196a:	01 48 78    	mov.b     w1, [w0]
    196c:	d9 00 37    	bra       0x1b20 <.L42>

0000196e <.L47>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    196e:	40 80 20    	mov.w     #0x804, w0
    1970:	90 40 78    	mov.b     [w0], w1
    1972:	a0 0b 21    	mov.w     #0x10ba, w0
    1974:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    1976:	40 80 20    	mov.w     #0x804, w0
    1978:	90 40 90    	mov.b     [w0+1], w1
    197a:	b0 0b 21    	mov.w     #0x10bb, w0
    197c:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    197e:	40 80 20    	mov.w     #0x804, w0
    1980:	10 00 90    	mov.w     [w0+2], w0
    1982:	e0 85 88    	mov.w     w0, 0x10bc
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    1984:	40 80 20    	mov.w     #0x804, w0
    1986:	20 00 90    	mov.w     [w0+4], w0
    1988:	f0 85 88    	mov.w     w0, 0x10be
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    198a:	40 80 20    	mov.w     #0x804, w0
    198c:	30 00 90    	mov.w     [w0+6], w0
    198e:	00 86 88    	mov.w     w0, 0x10c0
            switch (USB_setup.wValue.b[1]) {
    1990:	40 80 20    	mov.w     #0x804, w0
    1992:	30 40 90    	mov.b     [w0+3], w0
    1994:	00 80 fb    	ze        w0, w0
    1996:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1998:	0b 00 32    	bra       Z, 0x19b0 <.L106>
    199a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    199c:	24 00 32    	bra       Z, 0x19e6 <.L107>
    199e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    19a0:	37 00 3a    	bra       NZ, 0x1a10 <.L139>
                case DEVICE:
                    USB_request.data_ptr = Device;
    19a2:	a0 23 29    	mov.w     #0x923a, w0
    19a4:	10 86 88    	mov.w     w0, 0x10c2
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    19a6:	10 86 80    	mov.w     0x10c2, w0
    19a8:	10 40 78    	mov.b     [w0], w0
    19aa:	00 80 fb    	ze        w0, w0
    19ac:	20 86 88    	mov.w     w0, 0x10c4
                    break;
    19ae:	39 00 37    	bra       0x1a22 <.L108>

000019b0 <.L106>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    19b0:	40 80 20    	mov.w     #0x804, w0
    19b2:	20 40 90    	mov.b     [w0+2], w0
    19b4:	00 04 e0    	cp0.b     w0
    19b6:	13 00 3a    	bra       NZ, 0x19de <.L109>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    19b8:	40 80 20    	mov.w     #0x804, w0
    19ba:	20 40 90    	mov.b     [w0+2], w0
    19bc:	00 80 fb    	ze        w0, w0
    19be:	80 00 40    	add.w     w0, w0, w1
    19c0:	e0 25 29    	mov.w     #0x925e, w0
    19c2:	00 80 40    	add.w     w1, w0, w0
    19c4:	10 00 78    	mov.w     [w0], w0
    19c6:	10 86 88    	mov.w     w0, 0x10c2
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    19c8:	10 86 80    	mov.w     0x10c2, w0
    19ca:	00 80 e8    	inc2.w    w0, w0
    19cc:	90 40 78    	mov.b     [w0], w1
    19ce:	40 0c 21    	mov.w     #0x10c4, w0
    19d0:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    19d2:	10 86 80    	mov.w     0x10c2, w0
    19d4:	63 00 40    	add.w     w0, #0x3, w0
    19d6:	90 40 78    	mov.b     [w0], w1
    19d8:	50 0c 21    	mov.w     #0x10c5, w0
    19da:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    19dc:	22 00 37    	bra       0x1a22 <.L108>

000019de <.L109>:
    19de:	0c c8 bf    	mov.b     0x80c, WREG
    19e0:	00 04 a0    	bset.b    w0, #0x0
    19e2:	0c e8 b7    	mov.b     WREG, 0x80c
    19e4:	1e 00 37    	bra       0x1a22 <.L108>

000019e6 <.L107>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    19e6:	40 80 20    	mov.w     #0x804, w0
    19e8:	20 40 90    	mov.b     [w0+2], w0
    19ea:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    19ec:	0d 00 3e    	bra       GTU, 0x1a08 <.L111>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    19ee:	40 80 20    	mov.w     #0x804, w0
    19f0:	20 40 90    	mov.b     [w0+2], w0
    19f2:	00 80 fb    	ze        w0, w0
    19f4:	80 00 40    	add.w     w0, w0, w1
    19f6:	e0 29 29    	mov.w     #0x929e, w0
    19f8:	00 80 40    	add.w     w1, w0, w0
    19fa:	10 00 78    	mov.w     [w0], w0
    19fc:	10 86 88    	mov.w     w0, 0x10c2
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    19fe:	10 86 80    	mov.w     0x10c2, w0
    1a00:	10 40 78    	mov.b     [w0], w0
    1a02:	00 80 fb    	ze        w0, w0
    1a04:	20 86 88    	mov.w     w0, 0x10c4
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    1a06:	0d 00 37    	bra       0x1a22 <.L108>

00001a08 <.L111>:
    1a08:	0c c8 bf    	mov.b     0x80c, WREG
    1a0a:	00 04 a0    	bset.b    w0, #0x0
    1a0c:	0c e8 b7    	mov.b     WREG, 0x80c
    1a0e:	09 00 37    	bra       0x1a22 <.L108>

00001a10 <.L139>:
                default:
                    if (USB_get_descriptor_callback)
    1a10:	a0 40 80    	mov.w     0x814, w0
    1a12:	00 00 e0    	cp0.w     w0
    1a14:	03 00 32    	bra       Z, 0x1a1c <.L113>
                        USB_get_descriptor_callback();
    1a16:	a0 40 80    	mov.w     0x814, w0
    1a18:	00 00 01    	call      w0
    1a1a:	03 00 37    	bra       0x1a22 <.L108>

00001a1c <.L113>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    1a1c:	0c c8 bf    	mov.b     0x80c, WREG
    1a1e:	00 04 a0    	bset.b    w0, #0x0
    1a20:	0c e8 b7    	mov.b     WREG, 0x80c

00001a22 <.L108>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    1a22:	0c c8 bf    	mov.b     0x80c, WREG
    1a24:	00 80 fb    	ze        w0, w0
    1a26:	61 00 60    	and.w     w0, #0x1, w0
    1a28:	00 00 e0    	cp0.w     w0
    1a2a:	79 00 3a    	bra       NZ, 0x1b1e <.L144>
                USB_in_callbacks[0] = usb_send_data_packet;
    1a2c:	40 b2 21    	mov.w     #0x1b24, w0
    1a2e:	40 86 88    	mov.w     w0, 0x10c8
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    1a30:	40 80 20    	mov.w     #0x804, w0
    1a32:	b0 00 90    	mov.w     [w0+6], w1
    1a34:	20 86 80    	mov.w     0x10c4, w0
    1a36:	80 8f 50    	sub.w     w1, w0, [w15]
    1a38:	03 00 31    	bra       C, 0x1a40 <.L115>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    1a3a:	40 80 20    	mov.w     #0x804, w0
    1a3c:	30 00 90    	mov.w     [w0+6], w0
    1a3e:	20 86 88    	mov.w     w0, 0x10c4

00001a40 <.L115>:
                usb_send_data_packet();
    1a40:	71 00 07    	rcall     0x1b24 <_usb_send_data_packet> <.LFB7> <.LFE6>
            }
            break;
    1a42:	6e 00 37    	bra       0x1b20 <.L42>

00001a44 <.L48>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    1a44:	30 90 80    	mov.w     0x1206, w0
    1a46:	d1 80 20    	mov.w     #0x80d, w1
    1a48:	91 40 78    	mov.b     [w1], w1
    1a4a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    1a4c:	40 20 21    	mov.w     #0x1204, w0
    1a4e:	11 c0 b3    	mov.b     #0x1, w1
    1a50:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1a52:	50 20 21    	mov.w     #0x1205, w0
    1a54:	81 cc b3    	mov.b     #0xc8, w1
    1a56:	01 48 78    	mov.b     w1, [w0]
            break;
    1a58:	63 00 37    	bra       0x1b20 <.L42>

00001a5a <.L49>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    1a5a:	40 80 20    	mov.w     #0x804, w0
    1a5c:	20 40 90    	mov.b     [w0+2], w0
    1a5e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1a60:	1a 00 3e    	bra       GTU, 0x1a96 <.L116>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    1a62:	10 c0 b3    	mov.b     #0x1, w0
    1a64:	1f fc 07    	rcall     0x12a4 <_usb_disable_endpoints> <.L0> <.LFB1> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    1a66:	40 80 20    	mov.w     #0x804, w0
    1a68:	20 40 90    	mov.b     [w0+2], w0
    1a6a:	0d e8 b7    	mov.b     WREG, 0x80d
    1a6c:	0d c8 bf    	mov.b     0x80d, WREG
    1a6e:	00 80 fb    	ze        w0, w0
    1a70:	00 00 e0    	cp0.w     w0
    1a72:	03 00 3a    	bra       NZ, 0x1a7a <.L140>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    1a74:	20 c0 b3    	mov.b     #0x2, w0
    1a76:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    1a78:	07 00 37    	bra       0x1a88 <.L119>

00001a7a <.L140>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    1a7a:	30 c0 b3    	mov.b     #0x3, w0
    1a7c:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    1a7e:	90 40 80    	mov.w     0x812, w0
    1a80:	00 00 e0    	cp0.w     w0
    1a82:	02 00 32    	bra       Z, 0x1a88 <.L119>
                            USB_set_config_callback();
    1a84:	90 40 80    	mov.w     0x812, w0
    1a86:	00 00 01    	call      w0

00001a88 <.L119>:
                }
                BD[EP0IN].bytecount = 0;
    1a88:	40 20 21    	mov.w     #0x1204, w0
    1a8a:	80 40 eb    	clr.b     w1
    1a8c:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1a8e:	50 20 21    	mov.w     #0x1205, w0
    1a90:	81 cc b3    	mov.b     #0xc8, w1
    1a92:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1a94:	45 00 37    	bra       0x1b20 <.L42>

00001a96 <.L116>:
    1a96:	0c c8 bf    	mov.b     0x80c, WREG
    1a98:	00 04 a0    	bset.b    w0, #0x0
    1a9a:	0c e8 b7    	mov.b     WREG, 0x80c
    1a9c:	41 00 37    	bra       0x1b20 <.L42>

00001a9e <.L50>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    1a9e:	10 c8 bf    	mov.b     0x810, WREG
    1aa0:	00 80 fb    	ze        w0, w0
    1aa2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1aa4:	13 00 3a    	bra       NZ, 0x1acc <.L141>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1aa6:	40 80 20    	mov.w     #0x804, w0
    1aa8:	40 40 90    	mov.b     [w0+4], w0
    1aaa:	00 04 e0    	cp0.b     w0
    1aac:	0a 00 3a    	bra       NZ, 0x1ac2 <.L123>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    1aae:	30 90 80    	mov.w     0x1206, w0
    1ab0:	80 40 eb    	clr.b     w1
    1ab2:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    1ab4:	40 20 21    	mov.w     #0x1204, w0
    1ab6:	11 c0 b3    	mov.b     #0x1, w1
    1ab8:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1aba:	50 20 21    	mov.w     #0x1205, w0
    1abc:	81 cc b3    	mov.b     #0xc8, w1
    1abe:	01 48 78    	mov.b     w1, [w0]
    1ac0:	03 00 37    	bra       0x1ac8 <.L124>

00001ac2 <.L123>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1ac2:	0c c8 bf    	mov.b     0x80c, WREG
    1ac4:	00 04 a0    	bset.b    w0, #0x0
    1ac6:	0c e8 b7    	mov.b     WREG, 0x80c

00001ac8 <.L124>:
                    }
                    break;
    1ac8:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1aca:	2a 00 37    	bra       0x1b20 <.L42>

00001acc <.L141>:
    1acc:	0c c8 bf    	mov.b     0x80c, WREG
    1ace:	00 04 a0    	bset.b    w0, #0x0
    1ad0:	0c e8 b7    	mov.b     WREG, 0x80c
    1ad2:	26 00 37    	bra       0x1b20 <.L42>

00001ad4 <.L51>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    1ad4:	10 c8 bf    	mov.b     0x810, WREG
    1ad6:	00 80 fb    	ze        w0, w0
    1ad8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1ada:	19 00 3a    	bra       NZ, 0x1b0e <.L142>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1adc:	40 80 20    	mov.w     #0x804, w0
    1ade:	40 40 90    	mov.b     [w0+4], w0
    1ae0:	00 04 e0    	cp0.b     w0
    1ae2:	10 00 3a    	bra       NZ, 0x1b04 <.L128>
                        switch (USB_setup.wValue.b[0]) {
    1ae4:	40 80 20    	mov.w     #0x804, w0
    1ae6:	20 40 90    	mov.b     [w0+2], w0
    1ae8:	00 80 fb    	ze        w0, w0
    1aea:	00 00 e0    	cp0.w     w0
    1aec:	07 00 3a    	bra       NZ, 0x1afc <.L143>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    1aee:	40 20 21    	mov.w     #0x1204, w0
    1af0:	80 40 eb    	clr.b     w1
    1af2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1af4:	50 20 21    	mov.w     #0x1205, w0
    1af6:	81 cc b3    	mov.b     #0xc8, w1
    1af8:	01 48 78    	mov.b     w1, [w0]
                                break;
    1afa:	07 00 37    	bra       0x1b0a <.L132>

00001afc <.L143>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    1afc:	0c c8 bf    	mov.b     0x80c, WREG
    1afe:	00 04 a0    	bset.b    w0, #0x0
    1b00:	0c e8 b7    	mov.b     WREG, 0x80c
    1b02:	03 00 37    	bra       0x1b0a <.L132>

00001b04 <.L128>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1b04:	0c c8 bf    	mov.b     0x80c, WREG
    1b06:	00 04 a0    	bset.b    w0, #0x0
    1b08:	0c e8 b7    	mov.b     WREG, 0x80c

00001b0a <.L132>:
                    }
                    break;
    1b0a:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1b0c:	09 00 37    	bra       0x1b20 <.L42>

00001b0e <.L142>:
    1b0e:	0c c8 bf    	mov.b     0x80c, WREG
    1b10:	00 04 a0    	bset.b    w0, #0x0
    1b12:	0c e8 b7    	mov.b     WREG, 0x80c
    1b14:	05 00 37    	bra       0x1b20 <.L42>

00001b16 <.L43>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    1b16:	0c c8 bf    	mov.b     0x80c, WREG
    1b18:	00 04 a0    	bset.b    w0, #0x0
    1b1a:	0c e8 b7    	mov.b     WREG, 0x80c
    1b1c:	01 00 37    	bra       0x1b20 <.L42>

00001b1e <.L144>:
    1b1e:	00 00 00    	nop       

00001b20 <.L42>:
    }
}
    1b20:	00 80 fa    	ulnk      
    1b22:	00 00 06    	return    

00001b24 <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    1b24:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    1b26:	21 86 80    	mov.w     0x10c4, w1
    1b28:	f0 03 20    	mov.w     #0x3f, w0
    1b2a:	80 8f 50    	sub.w     w1, w0, [w15]
    1b2c:	05 00 3e    	bra       GTU, 0x1b38 <.L146>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    1b2e:	20 86 80    	mov.w     0x10c4, w0
    1b30:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    1b32:	00 00 eb    	clr.w     w0
    1b34:	20 86 88    	mov.w     w0, 0x10c4
    1b36:	05 00 37    	bra       0x1b42 <.L147>

00001b38 <.L146>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    1b38:	00 c4 b3    	mov.b     #0x40, w0
    1b3a:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    1b3c:	20 86 80    	mov.w     0x10c4, w0
    1b3e:	00 04 b1    	sub.w     #0x40, w0
    1b40:	20 86 88    	mov.w     w0, 0x10c4

00001b42 <.L147>:
    }
    for (i = 0; i < packet_length; i++) {
    1b42:	00 40 eb    	clr.b     w0
    1b44:	10 47 98    	mov.b     w0, [w14+1]
    1b46:	0c 00 37    	bra       0x1b60 <.L148>

00001b48 <.L149>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    1b48:	31 90 80    	mov.w     0x1206, w1
    1b4a:	1e 40 90    	mov.b     [w14+1], w0
    1b4c:	00 80 fb    	ze        w0, w0
    1b4e:	80 80 40    	add.w     w1, w0, w1
    1b50:	10 86 80    	mov.w     0x10c2, w0
    1b52:	10 41 78    	mov.b     [w0], w2
    1b54:	82 48 78    	mov.b     w2, [w1]
    1b56:	00 00 e8    	inc.w     w0, w0
    1b58:	10 86 88    	mov.w     w0, 0x10c2
    1b5a:	1e 40 90    	mov.b     [w14+1], w0
    1b5c:	00 40 e8    	inc.b     w0, w0
    1b5e:	10 47 98    	mov.b     w0, [w14+1]

00001b60 <.L148>:
    1b60:	1e 40 90    	mov.b     [w14+1], w0
    1b62:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1b64:	f1 ff 39    	bra       NC, 0x1b48 <.L149>
    }
    BD[EP0IN].bytecount = packet_length;
    1b66:	40 20 21    	mov.w     #0x1204, w0
    1b68:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1b6a:	50 20 21    	mov.w     #0x1205, w0
    1b6c:	10 40 78    	mov.b     [w0], w0
    1b6e:	00 c0 ea    	com.b     w0, w0
    1b70:	02 c4 b3    	mov.b     #0x40, w2
    1b72:	82 40 60    	and.b     w0, w2, w1
    1b74:	80 c8 b3    	mov.b     #0x88, w0
    1b76:	00 c0 70    	ior.b     w1, w0, w0
    1b78:	80 40 78    	mov.b     w0, w1
    1b7a:	50 20 21    	mov.w     #0x1205, w0
    1b7c:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    1b7e:	20 86 80    	mov.w     0x10c4, w0
    1b80:	00 00 e0    	cp0.w     w0
    1b82:	0f 00 3a    	bra       NZ, 0x1ba2 <.L145>
        if (USB_request.done_callback)
    1b84:	30 86 80    	mov.w     0x10c6, w0
    1b86:	00 00 e0    	cp0.w     w0
    1b88:	02 00 32    	bra       Z, 0x1b8e <.L151>
            USB_request.done_callback();
    1b8a:	30 86 80    	mov.w     0x10c6, w0
    1b8c:	00 00 01    	call      w0

00001b8e <.L151>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    1b8e:	a0 0b 21    	mov.w     #0x10ba, w0
    1b90:	80 c0 eb    	setm.b    w1
    1b92:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1b94:	b0 0b 21    	mov.w     #0x10bb, w0
    1b96:	80 c0 eb    	setm.b    w1
    1b98:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1b9a:	00 00 eb    	clr.w     w0
    1b9c:	30 86 88    	mov.w     w0, 0x10c6
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    1b9e:	00 00 eb    	clr.w     w0
    1ba0:	40 86 88    	mov.w     w0, 0x10c8

00001ba2 <.L145>:
    }
}
    1ba2:	00 80 fa    	ulnk      
    1ba4:	00 00 06    	return    

00001ba6 <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    1ba6:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    1ba8:	00 40 eb    	clr.b     w0
    1baa:	00 4f 78    	mov.b     w0, [w14]
    1bac:	09 00 37    	bra       0x1bc0 <.L153>

00001bae <.L154>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    1bae:	10 86 80    	mov.w     0x10c2, w0
    1bb0:	12 90 80    	mov.w     0x1202, w2
    1bb2:	9e 80 fb    	ze        [w14], w1
    1bb4:	81 00 41    	add.w     w2, w1, w1
    1bb6:	91 40 78    	mov.b     [w1], w1
    1bb8:	01 48 78    	mov.b     w1, [w0]
    1bba:	00 00 e8    	inc.w     w0, w0
    1bbc:	10 86 88    	mov.w     w0, 0x10c2
    1bbe:	1e 4f e8    	inc.b     [w14], [w14]

00001bc0 <.L153>:
    1bc0:	00 20 21    	mov.w     #0x1200, w0
    1bc2:	10 40 78    	mov.b     [w0], w0
    1bc4:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1bc6:	f3 ff 3e    	bra       GTU, 0x1bae <.L154>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    1bc8:	21 86 80    	mov.w     0x10c4, w1
    1bca:	00 20 21    	mov.w     #0x1200, w0
    1bcc:	10 40 78    	mov.b     [w0], w0
    1bce:	00 80 fb    	ze        w0, w0
    1bd0:	00 80 50    	sub.w     w1, w0, w0
    1bd2:	20 86 88    	mov.w     w0, 0x10c4
    if (USB_request.bytes_left.w > 0) {
    1bd4:	20 86 80    	mov.w     0x10c4, w0
    1bd6:	00 00 e0    	cp0.w     w0
    1bd8:	0e 00 32    	bra       Z, 0x1bf6 <.L155>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1bda:	00 20 21    	mov.w     #0x1200, w0
    1bdc:	01 c4 b3    	mov.b     #0x40, w1
    1bde:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1be0:	10 20 21    	mov.w     #0x1201, w0
    1be2:	10 40 78    	mov.b     [w0], w0
    1be4:	00 c0 ea    	com.b     w0, w0
    1be6:	02 c4 b3    	mov.b     #0x40, w2
    1be8:	82 40 60    	and.b     w0, w2, w1
    1bea:	80 c8 b3    	mov.b     #0x88, w0
    1bec:	00 c0 70    	ior.b     w1, w0, w0
    1bee:	80 40 78    	mov.b     w0, w1
    1bf0:	10 20 21    	mov.w     #0x1201, w0
    1bf2:	01 48 78    	mov.b     w1, [w0]
    1bf4:	0f 00 37    	bra       0x1c14 <.L152>

00001bf6 <.L155>:
    } else {
        if (USB_request.done_callback)
    1bf6:	30 86 80    	mov.w     0x10c6, w0
    1bf8:	00 00 e0    	cp0.w     w0
    1bfa:	02 00 32    	bra       Z, 0x1c00 <.L157>
            USB_request.done_callback();
    1bfc:	30 86 80    	mov.w     0x10c6, w0
    1bfe:	00 00 01    	call      w0

00001c00 <.L157>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    1c00:	a0 0b 21    	mov.w     #0x10ba, w0
    1c02:	80 c0 eb    	setm.b    w1
    1c04:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1c06:	b0 0b 21    	mov.w     #0x10bb, w0
    1c08:	80 c0 eb    	setm.b    w1
    1c0a:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1c0c:	00 00 eb    	clr.w     w0
    1c0e:	30 86 88    	mov.w     w0, 0x10c6
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    1c10:	00 00 eb    	clr.w     w0
    1c12:	40 87 88    	mov.w     w0, 0x10e8

00001c14 <.L152>:
    }
}
    1c14:	00 80 fa    	ulnk      
    1c16:	00 00 06    	return    

00001c18 <_init_ajuart>:
uint8_t U1TXbuffer[U1_TX_BUFFER_LENGTH];
uint8_t U1RXbuffer[U1_RX_BUFFER_LENGTH];
uint16_t U1_tx_threshold;

void init_ajuart(void) {
    1c18:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure audio jack UART pins and connect them to UART1
    AJ_TX_DIR = OUT; AJ_TX = 1;
    1c1a:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    1c1c:	f2 c2 a8    	bset.b    0x2f2, #0x6
    AJ_RX_DIR = IN;
    1c1e:	f0 e2 a8    	bset.b    0x2f0, #0x7

    RPOR = (uint8_t *)&RPOR0;
    1c20:	00 6c 20    	mov.w     #0x6c0, w0
    1c22:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    1c24:	00 68 20    	mov.w     #0x680, w0
    1c26:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1c28:	11 3a 80    	mov.w     0x742, w1
    1c2a:	f0 0b 20    	mov.w     #0xbf, w0
    1c2c:	00 81 60    	and.w     w1, w0, w2
    1c2e:	60 04 20    	mov.w     #0x46, w0
    1c30:	71 05 20    	mov.w     #0x57, w1
    1c32:	23 74 20    	mov.w     #0x742, w3
    1c34:	80 49 78    	mov.b     w0, [w3]
    1c36:	81 49 78    	mov.b     w1, [w3]
    1c38:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = AJ_RX_RP;
    1c3a:	1e 00 90    	mov.w     [w14+2], w0
    1c3c:	40 02 b0    	add.w     #0x24, w0
    1c3e:	a1 c1 b3    	mov.b     #0x1a, w1
    1c40:	01 48 78    	mov.b     w1, [w0]
    RPOR[AJ_TX_RP] = U1TX_RP;
    1c42:	9e 00 78    	mov.w     [w14], w1
    1c44:	75 80 40    	add.w     w1, #0x15, w0
    1c46:	31 c0 b3    	mov.b     #0x3, w1
    1c48:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1c4a:	10 3a 80    	mov.w     0x742, w0
    1c4c:	00 01 78    	mov.w     w0, w2
    1c4e:	02 60 a0    	bset.w    w2, #0x6
    1c50:	60 04 20    	mov.w     #0x46, w0
    1c52:	71 05 20    	mov.w     #0x57, w1
    1c54:	23 74 20    	mov.w     #0x742, w3
    1c56:	80 49 78    	mov.b     w0, [w3]
    1c58:	81 49 78    	mov.b     w1, [w3]
    1c5a:	82 49 78    	mov.b     w2, [w3]

    U1MODE = 0x0008;                // configure UART1 for transmission at
    1c5c:	80 00 20    	mov.w     #0x8, w0
    1c5e:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;                 //   115,200 baud, no parity, 1 stop bit
    1c60:	20 02 20    	mov.w     #0x22, w0
    1c62:	40 11 88    	mov.w     w0, 0x228

    U1_tx_buffer.data = U1TXbuffer;
    1c64:	a0 83 20    	mov.w     #0x83a, w0
    1c66:	30 41 88    	mov.w     w0, 0x826
    U1_tx_buffer.length = U1_TX_BUFFER_LENGTH;
    1c68:	00 40 20    	mov.w     #0x400, w0
    1c6a:	40 41 88    	mov.w     w0, 0x828
    U1_tx_buffer.head = 0;
    1c6c:	00 00 eb    	clr.w     w0
    1c6e:	50 41 88    	mov.w     w0, 0x82a
    U1_tx_buffer.tail = 0;
    1c70:	00 00 eb    	clr.w     w0
    1c72:	60 41 88    	mov.w     w0, 0x82c
    U1_tx_buffer.count = 0;
    1c74:	00 00 eb    	clr.w     w0
    1c76:	70 41 88    	mov.w     w0, 0x82e
    U1_tx_threshold = 3 * U1_TX_BUFFER_LENGTH / 4;
    1c78:	00 30 20    	mov.w     #0x300, w0
    1c7a:	20 41 88    	mov.w     w0, 0x824

    U1_rx_buffer.data = U1RXbuffer;
    1c7c:	a0 c3 20    	mov.w     #0xc3a, w0
    1c7e:	80 41 88    	mov.w     w0, 0x830
    U1_rx_buffer.length = U1_RX_BUFFER_LENGTH;
    1c80:	00 40 20    	mov.w     #0x400, w0
    1c82:	90 41 88    	mov.w     w0, 0x832
    U1_rx_buffer.head = 0;
    1c84:	00 00 eb    	clr.w     w0
    1c86:	a0 41 88    	mov.w     w0, 0x834
    U1_rx_buffer.tail = 0;
    1c88:	00 00 eb    	clr.w     w0
    1c8a:	b0 41 88    	mov.w     w0, 0x836
    U1_rx_buffer.count = 0;
    1c8c:	00 00 eb    	clr.w     w0
    1c8e:	c0 41 88    	mov.w     w0, 0x838

    U1STAbits.UTXISEL1 = 0;         // set UART1 UTXISEL<1:0> = 01, TX interrupt
    1c90:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;         //   when all transmit operations are done
    1c92:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    1c94:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;            // enable UART1 TX interrupt
    1c96:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    1c98:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;            // enable UART1 RX interrupt
    1c9a:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;          // enable UART1 module
    1c9c:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
    1c9e:	23 42 a8    	bset.b    0x223, #0x2
}
    1ca0:	00 80 fa    	ulnk      
    1ca2:	00 00 06    	return    

00001ca4 <_U1_in_waiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
        disable_interrupts();
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
        U1_tx_buffer.head++;
        if (U1_tx_buffer.head == U1_tx_buffer.length)
            U1_tx_buffer.head = 0;
        U1_tx_buffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
        disable_interrupts();
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
        U1_rx_buffer.tail++;
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    1ca4:	00 00 fa    	lnk       #0x0
    return U1_rx_buffer.count;
    1ca6:	c0 41 80    	mov.w     0x838, w0
}
    1ca8:	00 80 fa    	ulnk      
    1caa:	00 00 06    	return    

00001cac <_U1_flush_tx_buffer>:

void U1_flush_tx_buffer(void) {
    1cac:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    1cae:	11 11 80    	mov.w     0x222, w1
    1cb0:	00 40 20    	mov.w     #0x400, w0
    1cb2:	00 80 60    	and.w     w1, w0, w0
    1cb4:	00 00 e0    	cp0.w     w0
    1cb6:	01 00 3a    	bra       NZ, 0x1cba <.L15>
        U1STAbits.UTXEN = 1;        //   enable it
    1cb8:	23 42 a8    	bset.b    0x223, #0x2

00001cba <.L15>:
}
    1cba:	00 80 fa    	ulnk      
    1cbc:	00 00 06    	return    

00001cbe <_U1_putc>:

void U1_putc(uint8_t ch) {
    1cbe:	02 00 fa    	lnk       #0x2
    1cc0:	00 4f 78    	mov.b     w0, [w14]
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}
    1cc2:	00 00 00    	nop       

00001cc4 <.L18>:
    1cc4:	71 41 80    	mov.w     0x82e, w1
    1cc6:	40 41 80    	mov.w     0x828, w0
    1cc8:	80 8f 50    	sub.w     w1, w0, [w15]
    1cca:	fc ff 32    	bra       Z, 0x1cc4 <.L18>

    disable_interrupts();
    1ccc:	ff 3f fc    	disi      #0x3fff
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    1cce:	31 41 80    	mov.w     0x826, w1
    1cd0:	60 41 80    	mov.w     0x82c, w0
    1cd2:	00 80 40    	add.w     w1, w0, w0
    1cd4:	1e 48 78    	mov.b     [w14], [w0]
    U1_tx_buffer.tail++;
    1cd6:	60 41 80    	mov.w     0x82c, w0
    1cd8:	00 00 e8    	inc.w     w0, w0
    1cda:	60 41 88    	mov.w     w0, 0x82c
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
    1cdc:	61 41 80    	mov.w     0x82c, w1
    1cde:	40 41 80    	mov.w     0x828, w0
    1ce0:	80 8f 50    	sub.w     w1, w0, [w15]
    1ce2:	02 00 3a    	bra       NZ, 0x1ce8 <.L19>
        U1_tx_buffer.tail = 0;
    1ce4:	00 00 eb    	clr.w     w0
    1ce6:	60 41 88    	mov.w     w0, 0x82c

00001ce8 <.L19>:
    U1_tx_buffer.count++;
    1ce8:	70 41 80    	mov.w     0x82e, w0
    1cea:	00 00 e8    	inc.w     w0, w0
    1cec:	70 41 88    	mov.w     w0, 0x82e
    enable_interrupts();
    1cee:	52 20 ef    	clr.w     0x52

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
    1cf0:	71 41 80    	mov.w     0x82e, w1
    1cf2:	20 41 80    	mov.w     0x824, w0
    1cf4:	80 8f 50    	sub.w     w1, w0, [w15]
    1cf6:	01 00 39    	bra       NC, 0x1cfa <.L17>
        U1STAbits.UTXEN = 1;
    1cf8:	23 42 a8    	bset.b    0x223, #0x2

00001cfa <.L17>:
}
    1cfa:	00 80 fa    	ulnk      
    1cfc:	00 00 06    	return    

00001cfe <_U1_getc>:

uint8_t U1_getc(void) {
    1cfe:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}
    1d00:	00 00 00    	nop       

00001d02 <.L22>:
    1d02:	c0 41 80    	mov.w     0x838, w0
    1d04:	00 00 e0    	cp0.w     w0
    1d06:	fd ff 32    	bra       Z, 0x1d02 <.L22>

    disable_interrupts();
    1d08:	ff 3f fc    	disi      #0x3fff
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    1d0a:	81 41 80    	mov.w     0x830, w1
    1d0c:	a0 41 80    	mov.w     0x834, w0
    1d0e:	00 80 40    	add.w     w1, w0, w0
    1d10:	10 4f 78    	mov.b     [w0], [w14]
    U1_rx_buffer.head++;
    1d12:	a0 41 80    	mov.w     0x834, w0
    1d14:	00 00 e8    	inc.w     w0, w0
    1d16:	a0 41 88    	mov.w     w0, 0x834
    if (U1_rx_buffer.head == U1_rx_buffer.length)
    1d18:	a1 41 80    	mov.w     0x834, w1
    1d1a:	90 41 80    	mov.w     0x832, w0
    1d1c:	80 8f 50    	sub.w     w1, w0, [w15]
    1d1e:	02 00 3a    	bra       NZ, 0x1d24 <.L23>
        U1_rx_buffer.head = 0;
    1d20:	00 00 eb    	clr.w     w0
    1d22:	a0 41 88    	mov.w     w0, 0x834

00001d24 <.L23>:
    U1_rx_buffer.count--;
    1d24:	c0 41 80    	mov.w     0x838, w0
    1d26:	00 00 e9    	dec.w     w0, w0
    1d28:	c0 41 88    	mov.w     w0, 0x838
    enable_interrupts();
    1d2a:	52 20 ef    	clr.w     0x52

    return ch;
    1d2c:	1e 40 78    	mov.b     [w14], w0
}
    1d2e:	00 80 fa    	ulnk      
    1d30:	00 00 06    	return    

00001d32 <_U1_puts>:

void U1_puts(uint8_t *str) {
    1d32:	02 00 fa    	lnk       #0x2
    1d34:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    1d36:	04 00 37    	bra       0x1d40 <.L25>

00001d38 <.L26>:
        U1_putc(*str++);
    1d38:	1e 00 78    	mov.w     [w14], w0
    1d3a:	10 40 78    	mov.b     [w0], w0
    1d3c:	1e 0f e8    	inc.w     [w14], [w14]
    1d3e:	bf ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>

00001d40 <.L25>:
    1d40:	1e 00 78    	mov.w     [w14], w0
    1d42:	10 40 78    	mov.b     [w0], w0
    1d44:	00 04 e0    	cp0.b     w0
    1d46:	f8 ff 3a    	bra       NZ, 0x1d38 <.L26>
    U1_flush_tx_buffer();
    1d48:	b1 ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
}
    1d4a:	00 80 fa    	ulnk      
    1d4c:	00 00 06    	return    

00001d4e <_U1_gets>:

void U1_gets(uint8_t *str, uint16_t len) {
    1d4e:	04 00 fa    	lnk       #0x4
    1d50:	00 0f 78    	mov.w     w0, [w14]
    1d52:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    1d54:	1e 00 90    	mov.w     [w14+2], w0
    1d56:	00 00 e0    	cp0.w     w0
    1d58:	1a 00 32    	bra       Z, 0x1d8e <.L32>
        return;

    if (len == 1) {
    1d5a:	1e 00 90    	mov.w     [w14+2], w0
    1d5c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d5e:	04 00 3a    	bra       NZ, 0x1d68 <.L30>
        *str = '\0';
    1d60:	1e 00 78    	mov.w     [w14], w0
    1d62:	80 40 eb    	clr.b     w1
    1d64:	01 48 78    	mov.b     w1, [w0]
        return;
    1d66:	14 00 37    	bra       0x1d90 <.L27>

00001d68 <.L30>:
    }

    while (1) {
        *str = U1_getc();
    1d68:	ca ff 07    	rcall     0x1cfe <_U1_getc> <.LFB6> <.LFE5>
    1d6a:	9e 00 78    	mov.w     [w14], w1
    1d6c:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    1d6e:	1e 00 78    	mov.w     [w14], w0
    1d70:	10 40 78    	mov.b     [w0], w0
    1d72:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    1d74:	08 00 32    	bra       Z, 0x1d86 <.L31>
    1d76:	1e 00 90    	mov.w     [w14+2], w0
    1d78:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d7a:	05 00 32    	bra       Z, 0x1d86 <.L31>
            break;
        str++;
    1d7c:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    1d7e:	1e 00 90    	mov.w     [w14+2], w0
    1d80:	00 00 e9    	dec.w     w0, w0
    1d82:	10 07 98    	mov.w     w0, [w14+2]
    }
    1d84:	f1 ff 37    	bra       0x1d68 <.L30>

00001d86 <.L31>:
    *str = '\0';
    1d86:	1e 00 78    	mov.w     [w14], w0
    1d88:	80 40 eb    	clr.b     w1
    1d8a:	01 48 78    	mov.b     w1, [w0]
    1d8c:	01 00 37    	bra       0x1d90 <.L27>

00001d8e <.L32>:
    1d8e:	00 00 00    	nop       

00001d90 <.L27>:
}
    1d90:	00 80 fa    	ulnk      
    1d92:	00 00 06    	return    

00001d94 <_U1_gets_term>:

void U1_gets_term(uint8_t *str, uint16_t len) {
    1d94:	08 00 fa    	lnk       #0x8
    1d96:	20 07 98    	mov.w     w0, [w14+4]
    1d98:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    1d9a:	3e 00 90    	mov.w     [w14+6], w0
    1d9c:	00 00 e0    	cp0.w     w0
    1d9e:	6f 00 32    	bra       Z, 0x1e7e <.L46>
        return;

    if (len == 1) {
    1da0:	3e 00 90    	mov.w     [w14+6], w0
    1da2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1da4:	04 00 3a    	bra       NZ, 0x1dae <.L36>
        *str = '\0';
    1da6:	2e 00 90    	mov.w     [w14+4], w0
    1da8:	80 40 eb    	clr.b     w1
    1daa:	01 48 78    	mov.b     w1, [w0]
        return;
    1dac:	69 00 37    	bra       0x1e80 <.L33>

00001dae <.L36>:
    }

    U1_putc(0x1B);                          // save current cursor position
    1dae:	b0 c1 b3    	mov.b     #0x1b, w0
    1db0:	86 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('7');
    1db2:	70 c3 b3    	mov.b     #0x37, w0
    1db4:	84 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    1db6:	7a ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    start = str;
    1db8:	ae 00 90    	mov.w     [w14+4], w1
    1dba:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    1dbc:	be 00 90    	mov.w     [w14+6], w1
    1dbe:	01 0f 78    	mov.w     w1, [w14]
    1dc0:	03 00 37    	bra       0x1dc8 <.L45>

00001dc2 <.L47>:
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    1dc2:	00 00 00    	nop       
    1dc4:	01 00 37    	bra       0x1dc8 <.L45>

00001dc6 <.L48>:
    1dc6:	00 00 00    	nop       

00001dc8 <.L45>:
    1dc8:	9a ff 07    	rcall     0x1cfe <_U1_getc> <.LFB6> <.LFE5>
    1dca:	ae 00 90    	mov.w     [w14+4], w1
    1dcc:	80 48 78    	mov.b     w0, [w1]
    1dce:	2e 00 90    	mov.w     [w14+4], w0
    1dd0:	10 40 78    	mov.b     [w0], w0
    1dd2:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    1dd4:	09 00 3a    	bra       NZ, 0x1de8 <.L37>
    *str = '\0';                            // terminarte the string with null
    1dd6:	2e 00 90    	mov.w     [w14+4], w0
    1dd8:	80 40 eb    	clr.b     w1
    1dda:	01 48 78    	mov.b     w1, [w0]
    U1_putc('\n');                          // send newline and
    1ddc:	a0 c0 b3    	mov.b     #0xa, w0
    1dde:	6f ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    U1_putc('\r');                          //   carriage return
    1de0:	d0 c0 b3    	mov.b     #0xd, w0
    1de2:	6d ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    U1_flush_tx_buffer();
    1de4:	63 ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1de6:	4c 00 37    	bra       0x1e80 <.L33>

00001de8 <.L37>:
    1de8:	2e 00 90    	mov.w     [w14+4], w0
    1dea:	10 40 78    	mov.b     [w0], w0
    1dec:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    1dee:	10 00 3a    	bra       NZ, 0x1e10 <.L38>
    1df0:	b0 c1 b3    	mov.b     #0x1b, w0
    1df2:	65 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1df4:	80 c3 b3    	mov.b     #0x38, w0
    1df6:	63 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1df8:	b0 c1 b3    	mov.b     #0x1b, w0
    1dfa:	61 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1dfc:	b0 c5 b3    	mov.b     #0x5b, w0
    1dfe:	5f ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e00:	b0 c4 b3    	mov.b     #0x4b, w0
    1e02:	5d ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e04:	53 ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1e06:	9e 00 90    	mov.w     [w14+2], w1
    1e08:	21 07 98    	mov.w     w1, [w14+4]
    1e0a:	be 00 90    	mov.w     [w14+6], w1
    1e0c:	01 0f 78    	mov.w     w1, [w14]
    1e0e:	36 00 37    	bra       0x1e7c <.L39>

00001e10 <.L38>:
    1e10:	2e 00 90    	mov.w     [w14+4], w0
    1e12:	10 40 78    	mov.b     [w0], w0
    1e14:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    1e16:	05 00 32    	bra       Z, 0x1e22 <.L40>
    1e18:	2e 00 90    	mov.w     [w14+4], w0
    1e1a:	90 40 78    	mov.b     [w0], w1
    1e1c:	f0 c7 b3    	mov.b     #0x7f, w0
    1e1e:	80 cf 50    	sub.b     w1, w0, [w15]
    1e20:	14 00 3a    	bra       NZ, 0x1e4a <.L41>

00001e22 <.L40>:
    1e22:	ae 00 90    	mov.w     [w14+4], w1
    1e24:	1e 00 90    	mov.w     [w14+2], w0
    1e26:	80 8f 50    	sub.w     w1, w0, [w15]
    1e28:	0c 00 36    	bra       LEU, 0x1e42 <.L42>
    1e2a:	80 c0 b3    	mov.b     #0x8, w0
    1e2c:	48 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e2e:	00 c2 b3    	mov.b     #0x20, w0
    1e30:	46 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e32:	80 c0 b3    	mov.b     #0x8, w0
    1e34:	44 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e36:	3a ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1e38:	2e 00 90    	mov.w     [w14+4], w0
    1e3a:	00 00 e9    	dec.w     w0, w0
    1e3c:	20 07 98    	mov.w     w0, [w14+4]
    1e3e:	1e 0f e8    	inc.w     [w14], [w14]
    1e40:	03 00 37    	bra       0x1e48 <.L43>

00001e42 <.L42>:
    1e42:	70 c0 b3    	mov.b     #0x7, w0
    1e44:	3c ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e46:	32 ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>

00001e48 <.L43>:
    1e48:	19 00 37    	bra       0x1e7c <.L39>

00001e4a <.L41>:
    1e4a:	1e 00 78    	mov.w     [w14], w0
    1e4c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e4e:	04 00 3a    	bra       NZ, 0x1e58 <.L44>
    1e50:	70 c0 b3    	mov.b     #0x7, w0
    1e52:	35 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e54:	2b ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1e56:	12 00 37    	bra       0x1e7c <.L39>

00001e58 <.L44>:
    1e58:	2e 00 90    	mov.w     [w14+4], w0
    1e5a:	10 40 78    	mov.b     [w0], w0
    1e5c:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    1e5e:	b1 ff 36    	bra       LEU, 0x1dc2 <.L47>
    1e60:	2e 00 90    	mov.w     [w14+4], w0
    1e62:	90 40 78    	mov.b     [w0], w1
    1e64:	e0 c7 b3    	mov.b     #0x7e, w0
    1e66:	80 cf 50    	sub.b     w1, w0, [w15]
    1e68:	ae ff 3e    	bra       GTU, 0x1dc6 <.L48>
    1e6a:	2e 00 90    	mov.w     [w14+4], w0
    1e6c:	10 40 78    	mov.b     [w0], w0
    1e6e:	27 ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1e70:	1d ff 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
    1e72:	2e 00 90    	mov.w     [w14+4], w0
    1e74:	00 00 e8    	inc.w     w0, w0
    1e76:	20 07 98    	mov.w     w0, [w14+4]
    1e78:	1e 0f e9    	dec.w     [w14], [w14]
    1e7a:	a6 ff 37    	bra       0x1dc8 <.L45>

00001e7c <.L39>:
    1e7c:	a5 ff 37    	bra       0x1dc8 <.L45>

00001e7e <.L46>:
    1e7e:	00 00 00    	nop       

00001e80 <.L33>:
}
    1e80:	00 80 fa    	ulnk      
    1e82:	00 00 06    	return    

00001e84 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    1e84:	08 00 fa    	lnk       #0x8
    1e86:	10 07 98    	mov.w     w0, [w14+2]
    1e88:	21 07 98    	mov.w     w1, [w14+4]
    1e8a:	32 07 98    	mov.w     w2, [w14+6]
    int16_t i;

    switch (handle) {
    1e8c:	1e 00 90    	mov.w     [w14+2], w0
    1e8e:	60 00 40    	add.w     w0, #0x0, w0
    1e90:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e92:	10 00 3e    	bra       GTU, 0x1eb4 <.L55>
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
    1e94:	00 00 eb    	clr.w     w0
    1e96:	00 0f 78    	mov.w     w0, [w14]
    1e98:	07 00 37    	bra       0x1ea8 <.L52>

00001e9a <.L53>:
                U1_putc(*(uint8_t *)buffer++);
    1e9a:	2e 00 90    	mov.w     [w14+4], w0
    1e9c:	10 40 78    	mov.b     [w0], w0
    1e9e:	ae 00 90    	mov.w     [w14+4], w1
    1ea0:	81 00 e8    	inc.w     w1, w1
    1ea2:	21 07 98    	mov.w     w1, [w14+4]
    1ea4:	0c ff 07    	rcall     0x1cbe <_U1_putc> <.LFB5> <.LFE4>
    1ea6:	1e 0f e8    	inc.w     [w14], [w14]

00001ea8 <.L52>:
    1ea8:	9e 00 78    	mov.w     [w14], w1
    1eaa:	3e 00 90    	mov.w     [w14+6], w0
    1eac:	80 8f 50    	sub.w     w1, w0, [w15]
    1eae:	f5 ff 39    	bra       NC, 0x1e9a <.L53>
            U1_flush_tx_buffer();
    1eb0:	fd fe 07    	rcall     0x1cac <_U1_flush_tx_buffer> <.LFB4> <.LFE3>
            break;
    1eb2:	01 00 37    	bra       0x1eb6 <.L54>

00001eb4 <.L55>:
        default:
            break;
    1eb4:	00 00 00    	nop       

00001eb6 <.L54>:
    }
    return len;
    1eb6:	3e 00 90    	mov.w     [w14+6], w0
}
    1eb8:	00 80 fa    	ulnk      
    1eba:	00 00 06    	return    

00001ebc <_vendor_requests>:
    1ebc:	00 00 fa    	lnk       #0x0
    1ebe:	40 80 20    	mov.w     #0x804, w0
    1ec0:	10 40 90    	mov.b     [w0+1], w0
    1ec2:	00 80 fb    	ze        w0, w0
    1ec4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1ec6:	20 00 32    	bra       Z, 0x1f08 <.L5>
    1ec8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1eca:	05 00 3c    	bra       GT, 0x1ed6 <.L9>
    1ecc:	00 00 e0    	cp0.w     w0
    1ece:	0a 00 32    	bra       Z, 0x1ee4 <.L3> <.LBB2>
    1ed0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1ed2:	11 00 32    	bra       Z, 0x1ef6 <.L4>
    1ed4:	3d 00 37    	bra       0x1f50 <.L2>

00001ed6 <.L9>:
    1ed6:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1ed8:	29 00 32    	bra       Z, 0x1f2c <.L7>
    1eda:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1edc:	1e 00 35    	bra       LT, 0x1f1a <.L6>
    1ede:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1ee0:	2e 00 32    	bra       Z, 0x1f3e <.L8>
    1ee2:	36 00 37    	bra       0x1f50 <.L2>

00001ee4 <.L3>:
    1ee4:	40 20 21    	mov.w     #0x1204, w0
    1ee6:	80 40 eb    	clr.b     w1
    1ee8:	01 48 78    	mov.b     w1, [w0]
    1eea:	50 20 21    	mov.w     #0x1205, w0
    1eec:	81 cc b3    	mov.b     #0xc8, w1
    1eee:	01 48 78    	mov.b     w1, [w0]
    1ef0:	00 f7 21    	mov.w     #0x1f70, w0
    1ef2:	00 00 01    	call      w0
    1ef4:	30 00 37    	bra       0x1f56 <.L1> <.LBE2>

00001ef6 <.L4>:
    1ef6:	40 20 21    	mov.w     #0x1204, w0
    1ef8:	80 40 eb    	clr.b     w1
    1efa:	01 48 78    	mov.b     w1, [w0]
    1efc:	50 20 21    	mov.w     #0x1205, w0
    1efe:	81 cc b3    	mov.b     #0xc8, w1
    1f00:	01 48 78    	mov.b     w1, [w0]
    1f02:	80 fc 21    	mov.w     #0x1fc8, w0
    1f04:	00 00 01    	call      w0
    1f06:	27 00 37    	bra       0x1f56 <.L1> <.LBE2>

00001f08 <.L5>:
    1f08:	40 20 21    	mov.w     #0x1204, w0
    1f0a:	80 40 eb    	clr.b     w1
    1f0c:	01 48 78    	mov.b     w1, [w0]
    1f0e:	50 20 21    	mov.w     #0x1205, w0
    1f10:	81 cc b3    	mov.b     #0xc8, w1
    1f12:	01 48 78    	mov.b     w1, [w0]
    1f14:	c0 f9 21    	mov.w     #0x1f9c, w0
    1f16:	00 00 01    	call      w0
    1f18:	1e 00 37    	bra       0x1f56 <.L1> <.LBE2>

00001f1a <.L6>:
    1f1a:	40 20 21    	mov.w     #0x1204, w0
    1f1c:	80 40 eb    	clr.b     w1
    1f1e:	01 48 78    	mov.b     w1, [w0]
    1f20:	50 20 21    	mov.w     #0x1205, w0
    1f22:	81 cc b3    	mov.b     #0xc8, w1
    1f24:	01 48 78    	mov.b     w1, [w0]
    1f26:	a0 f5 21    	mov.w     #0x1f5a, w0
    1f28:	00 00 01    	call      w0
    1f2a:	15 00 37    	bra       0x1f56 <.L1> <.LBE2>

00001f2c <.L7>:
    1f2c:	40 20 21    	mov.w     #0x1204, w0
    1f2e:	11 c0 b3    	mov.b     #0x1, w1
    1f30:	01 48 78    	mov.b     w1, [w0]
    1f32:	50 20 21    	mov.w     #0x1205, w0
    1f34:	81 cc b3    	mov.b     #0xc8, w1
    1f36:	01 48 78    	mov.b     w1, [w0]
    1f38:	20 fb 21    	mov.w     #0x1fb2, w0
    1f3a:	00 00 01    	call      w0
    1f3c:	0c 00 37    	bra       0x1f56 <.L1> <.LBE2>

00001f3e <.L8>:
    1f3e:	40 20 21    	mov.w     #0x1204, w0
    1f40:	11 c0 b3    	mov.b     #0x1, w1
    1f42:	01 48 78    	mov.b     w1, [w0]
    1f44:	50 20 21    	mov.w     #0x1205, w0
    1f46:	81 cc b3    	mov.b     #0xc8, w1
    1f48:	01 48 78    	mov.b     w1, [w0]
    1f4a:	60 f8 21    	mov.w     #0x1f86, w0
    1f4c:	00 00 01    	call      w0
    1f4e:	03 00 37    	bra       0x1f56 <.L1> <.LBE2>

00001f50 <.L2>:
    1f50:	0c c8 bf    	mov.b     0x80c, WREG
    1f52:	00 04 a0    	bset.b    w0, #0x0
    1f54:	0c e8 b7    	mov.b     WREG, 0x80c

00001f56 <.L1>:
    1f56:	00 80 fa    	ulnk      
    1f58:	00 00 06    	return    

00001f5a <_forwardL>:
    1f5a:	00 00 fa    	lnk       #0x0
    1f5c:	00 00 20    	mov.w     #0x0, w0
    1f5e:	01 2c 21    	mov.w     #0x12c0, w1
    1f60:	f0 40 88    	mov.w     w0, 0x81e
    1f62:	01 41 88    	mov.w     w1, 0x820
    1f64:	01 41 80    	mov.w     0x820, w1
    1f66:	d0 40 80    	mov.w     0x81a, w0
    1f68:	00 80 40    	add.w     w1, w0, w0
    1f6a:	a0 0c 88    	mov.w     w0, 0x194
    1f6c:	00 80 fa    	ulnk      
    1f6e:	00 00 06    	return    

00001f70 <_forwardR>:
    1f70:	00 00 fa    	lnk       #0x0
    1f72:	00 00 20    	mov.w     #0x0, w0
    1f74:	01 84 23    	mov.w     #0x3840, w1
    1f76:	f0 40 88    	mov.w     w0, 0x81e
    1f78:	01 41 88    	mov.w     w1, 0x820
    1f7a:	01 41 80    	mov.w     0x820, w1
    1f7c:	d0 40 80    	mov.w     0x81a, w0
    1f7e:	00 80 40    	add.w     w1, w0, w0
    1f80:	f0 0c 88    	mov.w     w0, 0x19e
    1f82:	00 80 fa    	ulnk      
    1f84:	00 00 06    	return    

00001f86 <_backwardL>:
    1f86:	00 00 fa    	lnk       #0x0
    1f88:	00 00 20    	mov.w     #0x0, w0
    1f8a:	01 84 23    	mov.w     #0x3840, w1
    1f8c:	f0 40 88    	mov.w     w0, 0x81e
    1f8e:	01 41 88    	mov.w     w1, 0x820
    1f90:	01 41 80    	mov.w     0x820, w1
    1f92:	d0 40 80    	mov.w     0x81a, w0
    1f94:	00 80 40    	add.w     w1, w0, w0
    1f96:	a0 0c 88    	mov.w     w0, 0x194
    1f98:	00 80 fa    	ulnk      
    1f9a:	00 00 06    	return    

00001f9c <_backwardR>:
    1f9c:	00 00 fa    	lnk       #0x0
    1f9e:	00 00 20    	mov.w     #0x0, w0
    1fa0:	01 2c 21    	mov.w     #0x12c0, w1
    1fa2:	f0 40 88    	mov.w     w0, 0x81e
    1fa4:	01 41 88    	mov.w     w1, 0x820
    1fa6:	01 41 80    	mov.w     0x820, w1
    1fa8:	d0 40 80    	mov.w     0x81a, w0
    1faa:	00 80 40    	add.w     w1, w0, w0
    1fac:	f0 0c 88    	mov.w     w0, 0x19e
    1fae:	00 80 fa    	ulnk      
    1fb0:	00 00 06    	return    

00001fb2 <_stopL>:
    1fb2:	00 00 fa    	lnk       #0x0
    1fb4:	00 00 20    	mov.w     #0x0, w0
    1fb6:	01 58 22    	mov.w     #0x2580, w1
    1fb8:	f0 40 88    	mov.w     w0, 0x81e
    1fba:	01 41 88    	mov.w     w1, 0x820
    1fbc:	01 41 80    	mov.w     0x820, w1
    1fbe:	d0 40 80    	mov.w     0x81a, w0
    1fc0:	00 80 40    	add.w     w1, w0, w0
    1fc2:	a0 0c 88    	mov.w     w0, 0x194
    1fc4:	00 80 fa    	ulnk      
    1fc6:	00 00 06    	return    

00001fc8 <_stopR>:
    1fc8:	00 00 fa    	lnk       #0x0
    1fca:	00 00 20    	mov.w     #0x0, w0
    1fcc:	01 58 22    	mov.w     #0x2580, w1
    1fce:	f0 40 88    	mov.w     w0, 0x81e
    1fd0:	01 41 88    	mov.w     w1, 0x820
    1fd2:	01 41 80    	mov.w     0x820, w1
    1fd4:	d0 40 80    	mov.w     0x81a, w0
    1fd6:	00 80 40    	add.w     w1, w0, w0
    1fd8:	f0 0c 88    	mov.w     w0, 0x19e
    1fda:	00 80 fa    	ulnk      
    1fdc:	00 00 06    	return    

00001fde <_main>:
    1fde:	04 00 fa    	lnk       #0x4
    1fe0:	d6 00 07    	rcall     0x218e <.LFE2> <_init_elecanisms> <.L0> <.LFB0> <.Ltext0>
    1fe2:	1a fe 07    	rcall     0x1c18 <_init_ajuart> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    1fe4:	00 84 23    	mov.w     #0x3840, w0
    1fe6:	d0 40 88    	mov.w     w0, 0x81a
    1fe8:	00 b0 24    	mov.w     #0x4b00, w0
    1fea:	e0 40 88    	mov.w     w0, 0x81c
    1fec:	00 6c 20    	mov.w     #0x6c0, w0
    1fee:	00 0f 78    	mov.w     w0, [w14]
    1ff0:	00 68 20    	mov.w     #0x680, w0
    1ff2:	10 07 98    	mov.w     w0, [w14+2]
    1ff4:	11 3a 80    	mov.w     0x742, w1
    1ff6:	f0 0b 20    	mov.w     #0xbf, w0
    1ff8:	00 81 60    	and.w     w1, w0, w2
    1ffa:	60 04 20    	mov.w     #0x46, w0
    1ffc:	71 05 20    	mov.w     #0x57, w1
    1ffe:	23 74 20    	mov.w     #0x742, w3
    2000:	80 49 78    	mov.b     w0, [w3]
    2002:	81 49 78    	mov.b     w1, [w3]
    2004:	82 49 78    	mov.b     w2, [w3]
    2006:	1e 00 90    	mov.w     [w14+2], w0
    2008:	c0 02 b0    	add.w     #0x2c, w0
    200a:	91 c1 b3    	mov.b     #0x19, w1
    200c:	01 48 78    	mov.b     w1, [w0]
    200e:	9e 00 78    	mov.w     [w14], w1
    2010:	74 80 40    	add.w     w1, #0x14, w0
    2012:	a1 c0 b3    	mov.b     #0xa, w1
    2014:	01 48 78    	mov.b     w1, [w0]
    2016:	9e 00 78    	mov.w     [w14], w1
    2018:	6a 80 40    	add.w     w1, #0xa, w0
    201a:	b1 c0 b3    	mov.b     #0xb, w1
    201c:	01 48 78    	mov.b     w1, [w0]
    201e:	10 3a 80    	mov.w     0x742, w0
    2020:	00 01 78    	mov.w     w0, w2
    2022:	02 60 a0    	bset.w    w2, #0x6
    2024:	60 04 20    	mov.w     #0x46, w0
    2026:	71 05 20    	mov.w     #0x57, w1
    2028:	23 74 20    	mov.w     #0x742, w3
    202a:	80 49 78    	mov.b     w0, [w3]
    202c:	81 49 78    	mov.b     w1, [w3]
    202e:	82 49 78    	mov.b     w2, [w3]
    2030:	b0 03 20    	mov.w     #0x3b, w0
    2032:	10 13 88    	mov.w     w0, 0x262
    2034:	64 22 ef    	clr.w     0x264
    2036:	00 00 28    	mov.w     #0x8000, w0
    2038:	00 13 88    	mov.w     w0, 0x260
    203a:	d9 22 a9    	bclr.b    0x2d9, #0x1
    203c:	d9 42 a9    	bclr.b    0x2d9, #0x2
    203e:	db 22 a9    	bclr.b    0x2db, #0x1
    2040:	db 42 a9    	bclr.b    0x2db, #0x2
    2042:	00 6c 20    	mov.w     #0x6c0, w0
    2044:	00 0f 78    	mov.w     w0, [w14]
    2046:	00 68 20    	mov.w     #0x680, w0
    2048:	10 07 98    	mov.w     w0, [w14+2]
    204a:	11 3a 80    	mov.w     0x742, w1
    204c:	f0 0b 20    	mov.w     #0xbf, w0
    204e:	00 81 60    	and.w     w1, w0, w2
    2050:	60 04 20    	mov.w     #0x46, w0
    2052:	71 05 20    	mov.w     #0x57, w1
    2054:	23 74 20    	mov.w     #0x742, w3
    2056:	80 49 78    	mov.b     w0, [w3]
    2058:	81 49 78    	mov.b     w1, [w3]
    205a:	82 49 78    	mov.b     w2, [w3]
    205c:	9e 00 78    	mov.w     [w14], w1
    205e:	64 80 40    	add.w     w1, #0x4, w0
    2060:	21 c1 b3    	mov.b     #0x12, w1
    2062:	01 48 78    	mov.b     w1, [w0]
    2064:	9e 00 78    	mov.w     [w14], w1
    2066:	63 80 40    	add.w     w1, #0x3, w0
    2068:	31 c1 b3    	mov.b     #0x13, w1
    206a:	01 48 78    	mov.b     w1, [w0]
    206c:	10 3a 80    	mov.w     0x742, w0
    206e:	00 01 78    	mov.w     w0, w2
    2070:	02 60 a0    	bset.w    w2, #0x6
    2072:	60 04 20    	mov.w     #0x46, w0
    2074:	71 05 20    	mov.w     #0x57, w1
    2076:	23 74 20    	mov.w     #0x742, w3
    2078:	80 49 78    	mov.b     w0, [w3]
    207a:	81 49 78    	mov.b     w1, [w3]
    207c:	82 49 78    	mov.b     w2, [w3]
    207e:	f0 c0 21    	mov.w     #0x1c0f, w0
    2080:	80 0c 88    	mov.w     w0, 0x190
    2082:	b0 08 20    	mov.w     #0x8b, w0
    2084:	90 0c 88    	mov.w     w0, 0x192
    2086:	00 00 20    	mov.w     #0x0, w0
    2088:	01 58 22    	mov.w     #0x2580, w1
    208a:	f0 40 88    	mov.w     w0, 0x81e
    208c:	01 41 88    	mov.w     w1, 0x820
    208e:	01 41 80    	mov.w     0x820, w1
    2090:	d0 40 80    	mov.w     0x81a, w0
    2092:	00 80 40    	add.w     w1, w0, w0
    2094:	a0 0c 88    	mov.w     w0, 0x194
    2096:	10 00 20    	mov.w     #0x1, w0
    2098:	b0 0c 88    	mov.w     w0, 0x196
    209a:	98 21 ef    	clr.w     0x198
    209c:	f0 c0 21    	mov.w     #0x1c0f, w0
    209e:	d0 0c 88    	mov.w     w0, 0x19a
    20a0:	b0 08 20    	mov.w     #0x8b, w0
    20a2:	e0 0c 88    	mov.w     w0, 0x19c
    20a4:	00 00 20    	mov.w     #0x0, w0
    20a6:	01 58 22    	mov.w     #0x2580, w1
    20a8:	f0 40 88    	mov.w     w0, 0x81e
    20aa:	01 41 88    	mov.w     w1, 0x820
    20ac:	01 41 80    	mov.w     0x820, w1
    20ae:	d0 40 80    	mov.w     0x81a, w0
    20b0:	00 80 40    	add.w     w1, w0, w0
    20b2:	f0 0c 88    	mov.w     w0, 0x19e
    20b4:	10 00 20    	mov.w     #0x1, w0
    20b6:	00 0d 88    	mov.w     w0, 0x1a0
    20b8:	a2 21 ef    	clr.w     0x1a2
    20ba:	00 01 20    	mov.w     #0x10, w0
    20bc:	20 08 88    	mov.w     w0, 0x104
    20be:	f0 c3 29    	mov.w     #0x9c3f, w0
    20c0:	10 08 88    	mov.w     w0, 0x102
    20c2:	00 21 ef    	clr.w     0x100
    20c4:	05 e1 a8    	bset.b    0x105, #0x7
    20c6:	c0 eb 21    	mov.w     #0x1ebc, w0
    20c8:	c0 40 88    	mov.w     w0, 0x818
    20ca:	1c f9 07    	rcall     0x1304 <_init_usb> <.LFB3> <.LFE2>
    20cc:	00 00 00    	nop       

000020ce <.L18>:
    20ce:	10 c8 bf    	mov.b     0x810, WREG
    20d0:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    20d2:	fd ff 3a    	bra       NZ, 0x20ce <.L18>

000020d4 <.L19>:
    20d4:	ff ff 37    	bra       .
Disassembly of section .isr.text:

000020d6 <__U1TXInterrupt>:
    U1MODEbits.UARTEN = 1;          // enable UART1 module
    U1STAbits.UTXEN = 1;            // enable UART1 data transmission
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    20d6:	80 9f be    	mov.d     w0, [w15++]
    20d8:	32 00 f8    	push      0x32
    20da:	34 00 f8    	push      0x34
    20dc:	10 00 20    	mov.w     #0x1, w0
    20de:	a0 01 88    	mov.w     w0, 0x34
    20e0:	00 20 20    	mov.w     #0x200, w0
    20e2:	90 01 88    	mov.w     w0, 0x32
    20e4:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    20e6:	85 80 a9    	bclr.b    0x85, #0x4

    if (U1_tx_buffer.count == 0)    // if nothing left in UART1 TX buffer, 
    20e8:	70 41 80    	mov.w     0x82e, w0
    20ea:	00 00 e0    	cp0.w     w0
    20ec:	17 00 3a    	bra       NZ, 0x211c <.L8>
        U1STAbits.UTXEN = 0;        //   disable data transmission
    20ee:	23 42 a9    	bclr.b    0x223, #0x2

    while ((U1STAbits.UTXBF == 0) && (U1_tx_buffer.count != 0)) {
    20f0:	16 00 37    	bra       0x211e <.L4>

000020f2 <.L7>:
        disable_interrupts();
    20f2:	ff 3f fc    	disi      #0x3fff
        ch = U1_tx_buffer.data[U1_tx_buffer.head];
    20f4:	31 41 80    	mov.w     0x826, w1
    20f6:	50 41 80    	mov.w     0x82a, w0
    20f8:	00 80 40    	add.w     w1, w0, w0
    20fa:	10 4f 78    	mov.b     [w0], [w14]
        U1_tx_buffer.head++;
    20fc:	50 41 80    	mov.w     0x82a, w0
    20fe:	00 00 e8    	inc.w     w0, w0
    2100:	50 41 88    	mov.w     w0, 0x82a
        if (U1_tx_buffer.head == U1_tx_buffer.length)
    2102:	51 41 80    	mov.w     0x82a, w1
    2104:	40 41 80    	mov.w     0x828, w0
    2106:	80 8f 50    	sub.w     w1, w0, [w15]
    2108:	02 00 3a    	bra       NZ, 0x210e <.L5>
            U1_tx_buffer.head = 0;
    210a:	00 00 eb    	clr.w     w0
    210c:	50 41 88    	mov.w     w0, 0x82a

0000210e <.L5>:
        U1_tx_buffer.count--;
    210e:	70 41 80    	mov.w     0x82e, w0
    2110:	00 00 e9    	dec.w     w0, w0
    2112:	70 41 88    	mov.w     w0, 0x82e
        enable_interrupts();
    2114:	52 20 ef    	clr.w     0x52
        U1TXREG = (uint16_t)ch;
    2116:	1e 80 fb    	ze        [w14], w0
    2118:	20 11 88    	mov.w     w0, 0x224
    211a:	01 00 37    	bra       0x211e <.L4>

0000211c <.L8>:
    211c:	00 00 00    	nop       

0000211e <.L4>:
    211e:	11 11 80    	mov.w     0x222, w1
    2120:	00 20 20    	mov.w     #0x200, w0
    2122:	00 80 60    	and.w     w1, w0, w0
    2124:	00 00 e0    	cp0.w     w0
    2126:	03 00 3a    	bra       NZ, 0x212e <.L2>
    2128:	70 41 80    	mov.w     0x82e, w0
    212a:	00 00 e0    	cp0.w     w0
    212c:	e2 ff 3a    	bra       NZ, 0x20f2 <.L7>

0000212e <.L2>:
    }
}
    212e:	00 80 fa    	ulnk      
    2130:	34 00 f9    	pop       0x34
    2132:	32 00 f9    	pop       0x32
    2134:	4f 00 be    	mov.d     [--w15], w0
    2136:	00 40 06    	retfie    

00002138 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2138:	80 9f be    	mov.d     w0, [w15++]
    213a:	32 00 f8    	push      0x32
    213c:	34 00 f8    	push      0x34
    213e:	10 00 20    	mov.w     #0x1, w0
    2140:	a0 01 88    	mov.w     w0, 0x34
    2142:	00 20 20    	mov.w     #0x200, w0
    2144:	90 01 88    	mov.w     w0, 0x32
    2146:	00 00 fa    	lnk       #0x0
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    2148:	85 60 a9    	bclr.b    0x85, #0x3

    while ((U1STAbits.URXDA == 1) && (U1_rx_buffer.count != U1_rx_buffer.length)) {
    214a:	14 00 37    	bra       0x2174 <.L10>

0000214c <.L13>:
        disable_interrupts();
    214c:	ff 3f fc    	disi      #0x3fff
        U1_rx_buffer.data[U1_rx_buffer.tail] = (uint8_t)U1RXREG;
    214e:	81 41 80    	mov.w     0x830, w1
    2150:	b0 41 80    	mov.w     0x836, w0
    2152:	00 80 40    	add.w     w1, w0, w0
    2154:	31 11 80    	mov.w     0x226, w1
    2156:	81 40 78    	mov.b     w1, w1
    2158:	01 48 78    	mov.b     w1, [w0]
        U1_rx_buffer.tail++;
    215a:	b0 41 80    	mov.w     0x836, w0
    215c:	00 00 e8    	inc.w     w0, w0
    215e:	b0 41 88    	mov.w     w0, 0x836
        if (U1_rx_buffer.tail == U1_rx_buffer.length)
    2160:	b1 41 80    	mov.w     0x836, w1
            U1_rx_buffer.tail = 0;
        U1_rx_buffer.count++;
        enable_interrupts();
    }
}

uint16_t U1_in_waiting(void) {
    return U1_rx_buffer.count;
}

void U1_flush_tx_buffer(void) {
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
        U1STAbits.UTXEN = 1;        //   enable it
}

void U1_putc(uint8_t ch) {
    // Wait until UART1 TX buffer is not full
    while (U1_tx_buffer.count == U1_tx_buffer.length) {}

    disable_interrupts();
    U1_tx_buffer.data[U1_tx_buffer.tail] = ch;
    U1_tx_buffer.tail++;
    if (U1_tx_buffer.tail == U1_tx_buffer.length)
        U1_tx_buffer.tail = 0;
    U1_tx_buffer.count++;
    enable_interrupts();

    // If UART1 TX buffer is full enough, enable data transmission
    if (U1_tx_buffer.count >= U1_tx_threshold)
        U1STAbits.UTXEN = 1;
}

uint8_t U1_getc(void) {
    uint8_t ch;

    // Wait until UART1 RX buffer is not empty
    while (U1_rx_buffer.count == 0) {}

    disable_interrupts();
    ch = U1_rx_buffer.data[U1_rx_buffer.head];
    U1_rx_buffer.head++;
    if (U1_rx_buffer.head == U1_rx_buffer.length)
        U1_rx_buffer.head = 0;
    U1_rx_buffer.count--;
    enable_interrupts();

    return ch;
}

void U1_puts(uint8_t *str) {
    while (*str)
        U1_putc(*str++);
    U1_flush_tx_buffer();
}

void U1_gets(uint8_t *str, uint16_t len) {
    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    while (1) {
        *str = U1_getc();
        if ((*str == '\r') || (len == 1))
            break;
        str++;
        len--;
    }
    *str = '\0';
}

void U1_gets_term(uint8_t *str, uint16_t len) {
    uint8_t *start;
    uint16_t left;

    if (len == 0)
        return;

    if (len == 1) {
        *str = '\0';
        return;
    }

    U1_putc(0x1B);                          // save current cursor position
    U1_putc('7');
    U1_flush_tx_buffer();
    start = str;
    left = len;
    while (1) {
        *str = U1_getc();                   // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1_putc(0x1B);                  //   restore cursor position,
            U1_putc('8');
            U1_putc(0x1B);                  //   clear to end of line, and
            U1_putc('[');
            U1_putc('K');
            U1_flush_tx_buffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1_putc('\b');              //   erase the last character and
                U1_putc(' ');
                U1_putc('\b');
                U1_flush_tx_buffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1_putc('\a');              //   send alert/bell character
                U1_flush_tx_buffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1_putc('\a');                  //   send alert/bell character
            U1_flush_tx_buffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1_putc(*str);                  //   echo the received character
            U1_flush_tx_buffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    *str = '\0';                            // terminarte the string with null
    U1_putc('\n');                          // send newline and
    U1_putc('\r');                          //   carriage return
    U1_flush_tx_buffer();
}

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    int16_t i;

    switch (handle) {
        case 0:
        case 1:
        case 2:
            for (i = 0; i < len; i++)
                U1_putc(*(uint8_t *)buffer++);
            U1_flush_tx_buffer();
            break;
        default:
            break;
    }
    return len;
}
    2162:	90 41 80    	mov.w     0x832, w0
    2164:	80 8f 50    	sub.w     w1, w0, [w15]
    2166:	02 00 3a    	bra       NZ, 0x216c <.L11>
    2168:	00 00 eb    	clr.w     w0
    216a:	b0 41 88    	mov.w     w0, 0x836

0000216c <.L11>:
    216c:	c0 41 80    	mov.w     0x838, w0
    216e:	00 00 e8    	inc.w     w0, w0
    2170:	c0 41 88    	mov.w     w0, 0x838
    2172:	52 20 ef    	clr.w     0x52

00002174 <.L10>:
    2174:	10 11 80    	mov.w     0x222, w0
    2176:	61 00 60    	and.w     w0, #0x1, w0
    2178:	00 00 e0    	cp0.w     w0
    217a:	04 00 32    	bra       Z, 0x2184 <.L9>
    217c:	c1 41 80    	mov.w     0x838, w1
    217e:	90 41 80    	mov.w     0x832, w0
    2180:	80 8f 50    	sub.w     w1, w0, [w15]
    2182:	e4 ff 3a    	bra       NZ, 0x214c <.L13>

00002184 <.L9>:
    2184:	00 80 fa    	ulnk      
    2186:	34 00 f9    	pop       0x34
    2188:	32 00 f9    	pop       0x32
    218a:	4f 00 be    	mov.d     [--w15], w0
    218c:	00 40 06    	retfie    
Disassembly of section .text:

0000218e <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    218e:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    2190:	00 10 20    	mov.w     #0x100, w0
    2192:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    2194:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    2196:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    2198:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    219a:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    219c:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    219e:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    21a0:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    21a2:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    21a4:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    21a6:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    21a8:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    21aa:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    21ac:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    21ae:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    21b0:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    21b2:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    21b4:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    21b6:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    21b8:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    21ba:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    21bc:	f0 03 20    	mov.w     #0x3f, w0
    21be:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    21c0:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    21c2:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    21c4:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    21c6:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    21c8:	00 0e 20    	mov.w     #0xe0, w0
    21ca:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    21cc:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    21ce:	00 c4 20    	mov.w     #0xc40, w0
    21d0:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    21d2:	50 00 20    	mov.w     #0x5, w0
    21d4:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    21d6:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    21d8:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    21da:	dc e2 a9    	bclr.b    0x2dc, #0x7
    LED2_DIR = OUT; LED2 = 0;
    21dc:	e8 02 a9    	bclr.b    0x2e8, #0x0
    21de:	ec 02 a9    	bclr.b    0x2ec, #0x0
    LED3_DIR = OUT; LED3 = 0;
    21e0:	e8 22 a9    	bclr.b    0x2e8, #0x1
    21e2:	ec 22 a9    	bclr.b    0x2ec, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    21e4:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    21e6:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    21e8:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    21ea:	00 80 fa    	ulnk      
    21ec:	00 00 06    	return    

000021ee <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    21ee:	02 00 fa    	lnk       #0x2
    21f0:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    21f2:	9e 00 78    	mov.w     [w14], w1
    21f4:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    21f6:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    21f8:	00 00 00    	nop       

000021fa <.L3>:
    21fa:	00 19 80    	mov.w     0x320, w0
    21fc:	61 00 60    	and.w     w0, #0x1, w0
    21fe:	00 00 e0    	cp0.w     w0
    2200:	fc ff 32    	bra       Z, 0x21fa <.L3>
    return ADC1BUF0;
    2202:	00 18 80    	mov.w     0x300, w0
}
    2204:	00 80 fa    	ulnk      
    2206:	00 00 06    	return    
Disassembly of section .isr.text:

00002208 <__USB1Interrupt>:
    2208:	36 00 f8    	push      0x36
    220a:	80 9f be    	mov.d     w0, [w15++]
    220c:	82 9f be    	mov.d     w2, [w15++]
    220e:	84 9f be    	mov.d     w4, [w15++]
    2210:	86 9f be    	mov.d     w6, [w15++]
    2212:	32 00 f8    	push      0x32
    2214:	34 00 f8    	push      0x34
    2216:	10 00 20    	mov.w     #0x1, w0
    2218:	a0 01 88    	mov.w     w0, 0x34
    221a:	00 20 20    	mov.w     #0x200, w0
    221c:	90 01 88    	mov.w     w0, 0x32
    221e:	00 00 fa    	lnk       #0x0
    2220:	ae f8 07    	rcall     0x137e <_usb_service> <.LFB4> <.LFE3>
    2222:	00 80 fa    	ulnk      
    2224:	34 00 f9    	pop       0x34
    2226:	32 00 f9    	pop       0x32
    2228:	4f 03 be    	mov.d     [--w15], w6
    222a:	4f 02 be    	mov.d     [--w15], w4
    222c:	4f 01 be    	mov.d     [--w15], w2
    222e:	4f 00 be    	mov.d     [--w15], w0
    2230:	36 00 f9    	pop       0x36
    2232:	00 40 06    	retfie    
Disassembly of section .dinit:

00002234 <.dinit>:
    2234:	1a 08 00    	nop       
    2236:	0a 00 00    	nop       
    2238:	80 00 00    	nop       
    223a:	3a 10 00    	nop       
    223c:	ce 00 00    	nop       
    223e:	80 00 00    	nop       
    2240:	00 12 00    	nop       
    2242:	80 00 00    	nop       
    2244:	80 00 00    	nop       
    2246:	00 08 00    	nop       
    2248:	1a 00 00    	nop       
    224a:	80 00 00    	nop       
    224c:	26 08 00    	nop       
    224e:	14 08 00    	nop       
    2250:	80 00 00    	nop       
    2252:	24 08 00    	nop       
    2254:	02 00 00    	nop       
    2256:	80 00 00    	nop       
    2258:	00 00 00    	nop       
Disassembly of section .isr:

0000225a <__DefaultInterrupt>:
    225a:	00 40 da    	break     
    225c:	00 00 fe    	reset     
